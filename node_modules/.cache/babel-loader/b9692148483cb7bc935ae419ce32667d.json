{"ast":null,"code":"const httpGet = async theUrl => {\n  const response = await fetch(theUrl, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  response.json().then(data => {\n    data.map(d => {\n      console.log(d);\n      return {\n        year: d._id,\n        months: d.months\n      };\n    });\n  });\n};\n\nconst data = httpGet(\"http://localhost:5000/query/predictions_per_month\");\nexport default {\n  color: '#336cfb',\n  tooltip: {\n    trigger: 'none',\n    axisPointer: {\n      type: 'cross'\n    }\n  },\n  legend: {\n    data: [data]\n  },\n  grid: {\n    left: 30,\n    right: 0,\n    top: 50,\n    bottom: 50\n  },\n  xAxis: [{\n    type: 'category',\n    axisTick: {\n      alignWithLabel: true\n    },\n    axisLine: {\n      onZero: false,\n      lineStyle: {\n        color: '#336cfb'\n      }\n    },\n    axisPointer: {\n      label: {\n        formatter: function (params) {\n          return 'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n        }\n      }\n    },\n    data: Object.keys(data['months'] || {})\n  }],\n  yAxis: [{\n    type: 'value'\n  }],\n  series: [{\n    name: 'patients 2019',\n    type: 'line',\n    smooth: true,\n    data: [95, 124, 132, 143, 138, 178, 194, 211, 234, 257, 241, 226]\n  }]\n};","map":{"version":3,"names":["httpGet","theUrl","response","fetch","method","headers","Accept","json","then","data","map","d","console","log","year","_id","months","color","tooltip","trigger","axisPointer","type","legend","grid","left","right","top","bottom","xAxis","axisTick","alignWithLabel","axisLine","onZero","lineStyle","label","formatter","params","value","seriesData","length","Object","keys","yAxis","series","name","smooth"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/predictions-month-linechart.tsx"],"sourcesContent":["\r\nconst httpGet = async (theUrl) => {\r\n    const response = await fetch(theUrl, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    response.json().then((data) => {\r\n        data.map((d) => {\r\n            console.log(d);\r\n            return {\r\n                year: d._id,\r\n                months: d.months\r\n                }\r\n            })\r\n    })\r\n  };\r\n\r\n  const data = httpGet(\"http://localhost:5000/query/predictions_per_month\");\r\n\r\n\r\nexport default {\r\n    color: '#336cfb',\r\n    tooltip: {\r\n        trigger: 'none',\r\n        axisPointer: {\r\n            type: 'cross'\r\n        }\r\n    },\r\n    legend: {\r\n        data: [data]\r\n    },\r\n    grid: {\r\n        left: 30,\r\n        right: 0,\r\n        top: 50,\r\n        bottom: 50\r\n    },\r\n    xAxis: [\r\n        {\r\n            type: 'category',\r\n            axisTick: {\r\n                alignWithLabel: true\r\n            },\r\n            axisLine: {\r\n                onZero: false,\r\n                lineStyle: {\r\n                    color: '#336cfb'\r\n                }\r\n            },\r\n            axisPointer: {\r\n                label: {\r\n                    formatter: function (params) {\r\n                        return (\r\n                            'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '')\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n            data: Object.keys(data['months'] || {})\r\n        }\r\n    ],\r\n    yAxis: [\r\n        {\r\n            type: 'value'\r\n        }\r\n    ],\r\n    series: [\r\n        {\r\n            name: 'patients 2019',\r\n            type: 'line',\r\n            smooth: true,\r\n            data: [95, 124, 132, 143, 138, 178, 194, 211, 234, 257, 241, 226]\r\n        }\r\n    ]\r\n};\r\n"],"mappings":"AACA,MAAMA,OAAO,GAAG,MAAOC,MAAP,IAAkB;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAD,EAAS;IACnCG,MAAM,EAAE,KAD2B;IAEnCC,OAAO,EAAE;MACPC,MAAM,EAAE,kBADD;MAEP,gBAAgB;IAFT;EAF0B,CAAT,CAA5B;EAOAJ,QAAQ,CAACK,IAAT,GAAgBC,IAAhB,CAAsBC,IAAD,IAAU;IAC3BA,IAAI,CAACC,GAAL,CAAUC,CAAD,IAAO;MACZC,OAAO,CAACC,GAAR,CAAYF,CAAZ;MACA,OAAO;QACHG,IAAI,EAAEH,CAAC,CAACI,GADL;QAEHC,MAAM,EAAEL,CAAC,CAACK;MAFP,CAAP;IAIC,CANL;EAOH,CARD;AASD,CAjBH;;AAmBE,MAAMP,IAAI,GAAGT,OAAO,CAAC,mDAAD,CAApB;AAGF,eAAe;EACXiB,KAAK,EAAE,SADI;EAEXC,OAAO,EAAE;IACLC,OAAO,EAAE,MADJ;IAELC,WAAW,EAAE;MACTC,IAAI,EAAE;IADG;EAFR,CAFE;EAQXC,MAAM,EAAE;IACJb,IAAI,EAAE,CAACA,IAAD;EADF,CARG;EAWXc,IAAI,EAAE;IACFC,IAAI,EAAE,EADJ;IAEFC,KAAK,EAAE,CAFL;IAGFC,GAAG,EAAE,EAHH;IAIFC,MAAM,EAAE;EAJN,CAXK;EAiBXC,KAAK,EAAE,CACH;IACIP,IAAI,EAAE,UADV;IAEIQ,QAAQ,EAAE;MACNC,cAAc,EAAE;IADV,CAFd;IAKIC,QAAQ,EAAE;MACNC,MAAM,EAAE,KADF;MAENC,SAAS,EAAE;QACPhB,KAAK,EAAE;MADA;IAFL,CALd;IAWIG,WAAW,EAAE;MACTc,KAAK,EAAE;QACHC,SAAS,EAAE,UAAUC,MAAV,EAAkB;UACzB,OACI,cAAcA,MAAM,CAACC,KAArB,IAA8BD,MAAM,CAACE,UAAP,CAAkBC,MAAlB,GAA2B,MAAMH,MAAM,CAACE,UAAP,CAAkB,CAAlB,EAAqB7B,IAAtD,GAA6D,EAA3F,CADJ;QAGH;MALE;IADE,CAXjB;IAoBIA,IAAI,EAAE+B,MAAM,CAACC,IAAP,CAAYhC,IAAI,CAAC,QAAD,CAAJ,IAAkB,EAA9B;EApBV,CADG,CAjBI;EAyCXiC,KAAK,EAAE,CACH;IACIrB,IAAI,EAAE;EADV,CADG,CAzCI;EA8CXsB,MAAM,EAAE,CACJ;IACIC,IAAI,EAAE,eADV;IAEIvB,IAAI,EAAE,MAFV;IAGIwB,MAAM,EAAE,IAHZ;IAIIpC,IAAI,EAAE,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,EAAkD,GAAlD,EAAuD,GAAvD;EAJV,CADI;AA9CG,CAAf"},"metadata":{},"sourceType":"module"}