{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, externalGetKey) {\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  }\n\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var externalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, externalGetKey);\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"names":["_toConsumableArray","_defineProperty","_objectWithoutProperties","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","toArray","warning","getPosition","isTreeNode","getKey","pos","undefined","warningWithoutKey","treeData","Map","dig","list","path","treeNode","children","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_treeNode$props","props","rest","dataNode","parsedChildren","flattenTreeData","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","parent","index","mergedKey","flattenNode","data","isStart","isEnd","traverseDataNodes","dataNodes","callback","externalGetKey","syntheticGetKey","processNode","parentPos","level","subNode","subIndex","convertDataToEntities","_ref","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref2","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","get"],"sources":["E:/Work/PFE/Project folder/DocHelp-WA/node_modules/rc-tree/es/utils/treeUtil.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, externalGetKey) {\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  }\n\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var externalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, externalGetKey);\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,wBAAP,MAAqC,oDAArC;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;EAAE,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAZ,CAAX;;EAAgC,IAAIG,MAAM,CAACC,qBAAX,EAAkC;IAAE,IAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAP,CAA6BJ,MAA7B,CAAd;IAAoD,IAAIC,cAAJ,EAAoBI,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;MAAE,OAAOJ,MAAM,CAACK,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;IAAiE,CAAjG,CAAV;IAA8GP,IAAI,CAACQ,IAAL,CAAUC,KAAV,CAAgBT,IAAhB,EAAsBG,OAAtB;EAAiC;;EAAC,OAAOH,IAAP;AAAc;;AAErV,SAASU,aAAT,CAAuBC,MAAvB,EAA+B;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;IAAE,IAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;IAAuD,IAAIA,CAAC,GAAG,CAAR,EAAW;MAAEf,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;QAAEtB,eAAe,CAACgB,MAAD,EAASM,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;MAA4C,CAAnG;IAAuG,CAApH,MAA0H,IAAIhB,MAAM,CAACiB,yBAAX,EAAsC;MAAEjB,MAAM,CAACkB,gBAAP,CAAwBR,MAAxB,EAAgCV,MAAM,CAACiB,yBAAP,CAAiCH,MAAjC,CAAhC;IAA4E,CAApH,MAA0H;MAAElB,OAAO,CAACI,MAAM,CAACc,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;QAAEhB,MAAM,CAACmB,cAAP,CAAsBT,MAAtB,EAA8BM,GAA9B,EAAmChB,MAAM,CAACK,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;MAAmF,CAApI;IAAwI;EAAE;;EAAC,OAAON,MAAP;AAAgB;;AAEthB,OAAOU,OAAP,MAAoB,6BAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,SAAxC;AACA,OAAO,SAASC,MAAT,CAAgBR,GAAhB,EAAqBS,GAArB,EAA0B;EAC/B,IAAIT,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKU,SAA5B,EAAuC;IACrC,OAAOV,GAAP;EACD;;EAED,OAAOS,GAAP;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASE,iBAAT,GAA6B;EAClC,IAAIC,QAAQ,GAAGhB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBc,SAAzC,GAAqDd,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAnF;EACA,IAAIb,IAAI,GAAG,IAAI8B,GAAJ,EAAX;;EAEA,SAASC,GAAT,CAAaC,IAAb,EAAmB;IACjB,IAAIC,IAAI,GAAGpB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBc,SAAzC,GAAqDd,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;IACA,CAACmB,IAAI,IAAI,EAAT,EAAahB,OAAb,CAAqB,UAAUkB,QAAV,EAAoB;MACvC,IAAIjB,GAAG,GAAGiB,QAAQ,CAACjB,GAAnB;MAAA,IACIkB,QAAQ,GAAGD,QAAQ,CAACC,QADxB;MAEAb,OAAO,CAACL,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKU,SAAzB,EAAoC,uCAAuCS,MAAvC,CAA8CH,IAA9C,EAAoDG,MAApD,CAA2DnB,GAA3D,EAAgE,GAAhE,CAApC,CAAP;MACA,IAAIoB,SAAS,GAAGC,MAAM,CAACrB,GAAD,CAAtB;MACAK,OAAO,CAAC,CAACtB,IAAI,CAACuC,GAAL,CAASF,SAAT,CAAD,IAAwBpB,GAAG,KAAK,IAAhC,IAAwCA,GAAG,KAAKU,SAAjD,EAA4D,iCAAiCS,MAAjC,CAAwCC,SAAxC,CAA5D,CAAP;MACArC,IAAI,CAACwC,GAAL,CAASH,SAAT,EAAoB,IAApB;MACAN,GAAG,CAACI,QAAD,EAAW,GAAGC,MAAH,CAAUH,IAAV,EAAgBG,MAAhB,CAAuBC,SAAvB,EAAkC,KAAlC,CAAX,CAAH;IACD,CARD;EASD;;EAEDN,GAAG,CAACF,QAAD,CAAH;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASY,iBAAT,CAA2BC,SAA3B,EAAsC;EAC3C,SAASX,GAAT,CAAaY,IAAb,EAAmB;IACjB,IAAIC,SAAS,GAAGvB,OAAO,CAACsB,IAAD,CAAvB;IACA,OAAOC,SAAS,CAACC,GAAV,CAAc,UAAUX,QAAV,EAAoB;MACvC;MACA,IAAI,CAACV,UAAU,CAACU,QAAD,CAAf,EAA2B;QACzBZ,OAAO,CAAC,CAACY,QAAF,EAAY,qDAAZ,CAAP;QACA,OAAO,IAAP;MACD;;MAED,IAAIjB,GAAG,GAAGiB,QAAQ,CAACjB,GAAnB;;MAEA,IAAI6B,eAAe,GAAGZ,QAAQ,CAACa,KAA/B;MAAA,IACIZ,QAAQ,GAAGW,eAAe,CAACX,QAD/B;MAAA,IAEIa,IAAI,GAAGpD,wBAAwB,CAACkD,eAAD,EAAkB,CAAC,UAAD,CAAlB,CAFnC;;MAIA,IAAIG,QAAQ,GAAGvC,aAAa,CAAC;QAC3BO,GAAG,EAAEA;MADsB,CAAD,EAEzB+B,IAFyB,CAA5B;;MAIA,IAAIE,cAAc,GAAGnB,GAAG,CAACI,QAAD,CAAxB;;MAEA,IAAIe,cAAc,CAACpC,MAAnB,EAA2B;QACzBmC,QAAQ,CAACd,QAAT,GAAoBe,cAApB;MACD;;MAED,OAAOD,QAAP;IACD,CAxBM,EAwBJ7C,MAxBI,CAwBG,UAAU6C,QAAV,EAAoB;MAC5B,OAAOA,QAAP;IACD,CA1BM,CAAP;EA2BD;;EAED,OAAOlB,GAAG,CAACW,SAAD,CAAV;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASS,eAAT,GAA2B;EAChC,IAAIC,YAAY,GAAGvC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBc,SAAzC,GAAqDd,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAvF;EACA,IAAIwC,YAAY,GAAGxC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBc,SAAzC,GAAqDd,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAvF;EACA,IAAIyC,cAAc,GAAG,IAAIC,GAAJ,CAAQF,YAAY,KAAK,IAAjB,GAAwB,EAAxB,GAA6BA,YAArC,CAArB;EACA,IAAIG,WAAW,GAAG,EAAlB;;EAEA,SAASzB,GAAT,CAAaC,IAAb,EAAmB;IACjB,IAAIyB,MAAM,GAAG5C,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBc,SAAzC,GAAqDd,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAjF;IACA,OAAOmB,IAAI,CAACa,GAAL,CAAS,UAAUX,QAAV,EAAoBwB,KAApB,EAA2B;MACzC,IAAIhC,GAAG,GAAGH,WAAW,CAACkC,MAAM,GAAGA,MAAM,CAAC/B,GAAV,GAAgB,GAAvB,EAA4BgC,KAA5B,CAArB;MACA,IAAIC,SAAS,GAAGlC,MAAM,CAACS,QAAQ,CAACjB,GAAV,EAAeS,GAAf,CAAtB,CAFyC,CAEE;;MAE3C,IAAIkC,WAAW,GAAGlD,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKwB,QAAL,CAAd,EAA8B,EAA9B,EAAkC;QAC/DuB,MAAM,EAAEA,MADuD;QAE/D/B,GAAG,EAAEA,GAF0D;QAG/DS,QAAQ,EAAE,IAHqD;QAI/D0B,IAAI,EAAE3B,QAJyD;QAK/D4B,OAAO,EAAE,GAAG1B,MAAH,CAAU1C,kBAAkB,CAAC+D,MAAM,GAAGA,MAAM,CAACK,OAAV,GAAoB,EAA3B,CAA5B,EAA4D,CAACJ,KAAK,KAAK,CAAX,CAA5D,CALsD;QAM/DK,KAAK,EAAE,GAAG3B,MAAH,CAAU1C,kBAAkB,CAAC+D,MAAM,GAAGA,MAAM,CAACM,KAAV,GAAkB,EAAzB,CAA5B,EAA0D,CAACL,KAAK,KAAK1B,IAAI,CAAClB,MAAL,GAAc,CAAzB,CAA1D;MANwD,CAAlC,CAA/B;;MASA0C,WAAW,CAAChD,IAAZ,CAAiBoD,WAAjB,EAbyC,CAaV;;MAE/B,IAAIP,YAAY,KAAK,IAAjB,IAAyBC,cAAc,CAACf,GAAf,CAAmBoB,SAAnB,CAA7B,EAA4D;QAC1DC,WAAW,CAACzB,QAAZ,GAAuBJ,GAAG,CAACG,QAAQ,CAACC,QAAT,IAAqB,EAAtB,EAA0ByB,WAA1B,CAA1B;MACD,CAFD,MAEO;QACLA,WAAW,CAACzB,QAAZ,GAAuB,EAAvB;MACD;;MAED,OAAOyB,WAAP;IACD,CAtBM,CAAP;EAuBD;;EAED7B,GAAG,CAACqB,YAAD,CAAH;EACA,OAAOI,WAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,iBAAT,CAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDC,cAAhD,EAAgE;EACrE,IAAIC,eAAJ;;EAEA,IAAID,cAAJ,EAAoB;IAClB,IAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;MACtCC,eAAe,GAAG,SAASA,eAAT,CAAyBzB,IAAzB,EAA+B;QAC/C,OAAOA,IAAI,CAACwB,cAAD,CAAX;MACD,CAFD;IAGD,CAJD,MAIO,IAAI,OAAOA,cAAP,KAA0B,UAA9B,EAA0C;MAC/CC,eAAe,GAAG,SAASA,eAAT,CAAyBzB,IAAzB,EAA+B;QAC/C,OAAOwB,cAAc,CAACxB,IAAD,CAArB;MACD,CAFD;IAGD;EACF,CAVD,MAUO;IACLyB,eAAe,GAAG,SAASA,eAAT,CAAyBzB,IAAzB,EAA+BjB,GAA/B,EAAoC;MACpD,OAAOD,MAAM,CAACkB,IAAI,CAAC1B,GAAN,EAAWS,GAAX,CAAb;IACD,CAFD;EAGD;;EAED,SAAS2C,WAAT,CAAqB1B,IAArB,EAA2Be,KAA3B,EAAkCD,MAAlC,EAA0C;IACxC,IAAItB,QAAQ,GAAGQ,IAAI,GAAGA,IAAI,CAACR,QAAR,GAAmB8B,SAAtC;IACA,IAAIvC,GAAG,GAAGiB,IAAI,GAAGpB,WAAW,CAACkC,MAAM,CAAC/B,GAAR,EAAagC,KAAb,CAAd,GAAoC,GAAlD,CAFwC,CAEe;;IAEvD,IAAIf,IAAJ,EAAU;MACR,IAAI1B,GAAG,GAAGmD,eAAe,CAACzB,IAAD,EAAOjB,GAAP,CAAzB;MACA,IAAImC,IAAI,GAAG;QACTlB,IAAI,EAAEA,IADG;QAETe,KAAK,EAAEA,KAFE;QAGThC,GAAG,EAAEA,GAHI;QAITT,GAAG,EAAEA,GAJI;QAKTqD,SAAS,EAAEb,MAAM,CAACd,IAAP,GAAcc,MAAM,CAAC/B,GAArB,GAA2B,IAL7B;QAMT6C,KAAK,EAAEd,MAAM,CAACc,KAAP,GAAe;MANb,CAAX;MAQAL,QAAQ,CAACL,IAAD,CAAR;IACD,CAfuC,CAetC;;;IAGF,IAAI1B,QAAJ,EAAc;MACZA,QAAQ,CAACnB,OAAT,CAAiB,UAAUwD,OAAV,EAAmBC,QAAnB,EAA6B;QAC5CJ,WAAW,CAACG,OAAD,EAAUC,QAAV,EAAoB;UAC7B9B,IAAI,EAAEA,IADuB;UAE7BjB,GAAG,EAAEA,GAFwB;UAG7B6C,KAAK,EAAEd,MAAM,GAAGA,MAAM,CAACc,KAAP,GAAe,CAAlB,GAAsB,CAAC;QAHP,CAApB,CAAX;MAKD,CAND;IAOD;EACF;;EAEDF,WAAW,CAAC,IAAD,CAAX;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASK,qBAAT,CAA+BT,SAA/B,EAA0C;EAC/C,IAAIU,IAAI,GAAG9D,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBc,SAAzC,GAAqDd,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;EAAA,IACI+D,WAAW,GAAGD,IAAI,CAACC,WADvB;EAAA,IAEIC,aAAa,GAAGF,IAAI,CAACE,aAFzB;EAAA,IAGIC,iBAAiB,GAAGH,IAAI,CAACG,iBAH7B;;EAKA,IAAIX,cAAc,GAAGtD,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCc,SAA3D;EACA,IAAIoD,WAAW,GAAG,EAAlB;EACA,IAAIC,WAAW,GAAG,EAAlB;EACA,IAAIC,OAAO,GAAG;IACZF,WAAW,EAAEA,WADD;IAEZC,WAAW,EAAEA;EAFD,CAAd;;EAKA,IAAIJ,WAAJ,EAAiB;IACfK,OAAO,GAAGL,WAAW,CAACK,OAAD,CAAX,IAAwBA,OAAlC;EACD;;EAEDjB,iBAAiB,CAACC,SAAD,EAAY,UAAUiB,IAAV,EAAgB;IAC3C,IAAIvC,IAAI,GAAGuC,IAAI,CAACvC,IAAhB;IAAA,IACIe,KAAK,GAAGwB,IAAI,CAACxB,KADjB;IAAA,IAEIhC,GAAG,GAAGwD,IAAI,CAACxD,GAFf;IAAA,IAGIT,GAAG,GAAGiE,IAAI,CAACjE,GAHf;IAAA,IAIIqD,SAAS,GAAGY,IAAI,CAACZ,SAJrB;IAAA,IAKIC,KAAK,GAAGW,IAAI,CAACX,KALjB;IAMA,IAAIY,MAAM,GAAG;MACXxC,IAAI,EAAEA,IADK;MAEXe,KAAK,EAAEA,KAFI;MAGXzC,GAAG,EAAEA,GAHM;MAIXS,GAAG,EAAEA,GAJM;MAKX6C,KAAK,EAAEA;IALI,CAAb;IAOA,IAAIZ,SAAS,GAAGlC,MAAM,CAACR,GAAD,EAAMS,GAAN,CAAtB;IACAqD,WAAW,CAACrD,GAAD,CAAX,GAAmByD,MAAnB;IACAH,WAAW,CAACrB,SAAD,CAAX,GAAyBwB,MAAzB,CAhB2C,CAgBV;;IAEjCA,MAAM,CAAC1B,MAAP,GAAgBsB,WAAW,CAACT,SAAD,CAA3B;;IAEA,IAAIa,MAAM,CAAC1B,MAAX,EAAmB;MACjB0B,MAAM,CAAC1B,MAAP,CAActB,QAAd,GAAyBgD,MAAM,CAAC1B,MAAP,CAActB,QAAd,IAA0B,EAAnD;MACAgD,MAAM,CAAC1B,MAAP,CAActB,QAAd,CAAuB3B,IAAvB,CAA4B2E,MAA5B;IACD;;IAED,IAAIN,aAAJ,EAAmB;MACjBA,aAAa,CAACM,MAAD,EAASF,OAAT,CAAb;IACD;EACF,CA5BgB,EA4Bdd,cA5Bc,CAAjB;;EA8BA,IAAIW,iBAAJ,EAAuB;IACrBA,iBAAiB,CAACG,OAAD,CAAjB;EACD;;EAED,OAAOA,OAAP;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASG,gBAAT,CAA0BnE,GAA1B,EAA+BoE,KAA/B,EAAsC;EAC3C,IAAIhC,YAAY,GAAGgC,KAAK,CAAChC,YAAzB;EAAA,IACIiC,YAAY,GAAGD,KAAK,CAACC,YADzB;EAAA,IAEIC,UAAU,GAAGF,KAAK,CAACE,UAFvB;EAAA,IAGIC,WAAW,GAAGH,KAAK,CAACG,WAHxB;EAAA,IAIIC,WAAW,GAAGJ,KAAK,CAACI,WAJxB;EAAA,IAKIC,eAAe,GAAGL,KAAK,CAACK,eAL5B;EAAA,IAMIC,eAAe,GAAGN,KAAK,CAACM,eAN5B;EAAA,IAOIC,YAAY,GAAGP,KAAK,CAACO,YAPzB;EAAA,IAQIZ,WAAW,GAAGK,KAAK,CAACL,WARxB;EASA,IAAIG,MAAM,GAAGH,WAAW,CAAC/D,GAAD,CAAxB;EACA,IAAI4E,aAAa,GAAG;IAClBC,QAAQ,EAAE7E,GADQ;IAElB8E,QAAQ,EAAE1C,YAAY,CAAC2C,OAAb,CAAqB/E,GAArB,MAA8B,CAAC,CAFvB;IAGlBgF,QAAQ,EAAEX,YAAY,CAACU,OAAb,CAAqB/E,GAArB,MAA8B,CAAC,CAHvB;IAIlBiF,MAAM,EAAEX,UAAU,CAACS,OAAX,CAAmB/E,GAAnB,MAA4B,CAAC,CAJnB;IAKlBkF,OAAO,EAAEX,WAAW,CAACQ,OAAZ,CAAoB/E,GAApB,MAA6B,CAAC,CALrB;IAMlBmF,OAAO,EAAEX,WAAW,CAACO,OAAZ,CAAoB/E,GAApB,MAA6B,CAAC,CANrB;IAOlBoF,WAAW,EAAEX,eAAe,CAACM,OAAhB,CAAwB/E,GAAxB,MAAiC,CAAC,CAP7B;IAQlBS,GAAG,EAAEY,MAAM,CAAC6C,MAAM,GAAGA,MAAM,CAACzD,GAAV,GAAgB,EAAvB,CARO;IASlB;IACA4E,QAAQ,EAAEX,eAAe,KAAK1E,GAApB,IAA2B2E,YAAY,KAAK,CAVpC;IAWlBW,cAAc,EAAEZ,eAAe,KAAK1E,GAApB,IAA2B2E,YAAY,KAAK,CAAC,CAX3C;IAYlBY,iBAAiB,EAAEb,eAAe,KAAK1E,GAApB,IAA2B2E,YAAY,KAAK;EAZ7C,CAApB;EAcA,OAAOC,aAAP;AACD;AACD,OAAO,SAASY,2BAAT,CAAqC1D,KAArC,EAA4C;EACjD,IAAIc,IAAI,GAAGd,KAAK,CAACc,IAAjB;EAAA,IACIkC,QAAQ,GAAGhD,KAAK,CAACgD,QADrB;EAAA,IAEIE,QAAQ,GAAGlD,KAAK,CAACkD,QAFrB;EAAA,IAGIG,OAAO,GAAGrD,KAAK,CAACqD,OAHpB;EAAA,IAIIF,MAAM,GAAGnD,KAAK,CAACmD,MAJnB;EAAA,IAKIC,OAAO,GAAGpD,KAAK,CAACoD,OALpB;EAAA,IAMIE,WAAW,GAAGtD,KAAK,CAACsD,WANxB;EAAA,IAOIC,QAAQ,GAAGvD,KAAK,CAACuD,QAPrB;EAAA,IAQIC,cAAc,GAAGxD,KAAK,CAACwD,cAR3B;EAAA,IASIC,iBAAiB,GAAGzD,KAAK,CAACyD,iBAT9B;EAAA,IAUI9E,GAAG,GAAGqB,KAAK,CAACrB,GAVhB;EAAA,IAWIgF,MAAM,GAAG3D,KAAK,CAAC2D,MAXnB;;EAaA,IAAIC,SAAS,GAAGjG,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKmD,IAAL,CAAd,EAA0B,EAA1B,EAA8B;IACzDkC,QAAQ,EAAEA,QAD+C;IAEzDE,QAAQ,EAAEA,QAF+C;IAGzDG,OAAO,EAAEA,OAHgD;IAIzDF,MAAM,EAAEA,MAJiD;IAKzDC,OAAO,EAAEA,OALgD;IAMzDE,WAAW,EAAEA,WAN4C;IAOzDC,QAAQ,EAAEA,QAP+C;IAQzDC,cAAc,EAAEA,cARyC;IASzDC,iBAAiB,EAAEA,iBATsC;IAUzD9E,GAAG,EAAEA,GAVoD;IAWzDgF,MAAM,EAAEA;EAXiD,CAA9B,CAA7B;;EAcA,IAAI,EAAE,WAAWC,SAAb,CAAJ,EAA6B;IAC3B1G,MAAM,CAACmB,cAAP,CAAsBuF,SAAtB,EAAiC,OAAjC,EAA0C;MACxCC,GAAG,EAAE,SAASA,GAAT,GAAe;QAClBtF,OAAO,CAAC,KAAD,EAAQ,uIAAR,CAAP;QACA,OAAOyB,KAAP;MACD;IAJuC,CAA1C;EAMD;;EAED,OAAO4D,SAAP;AACD"},"metadata":{},"sourceType":"module"}