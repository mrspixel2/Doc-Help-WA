{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\dashboards\\\\dashboard\\\\charts\\\\kidneySymptomsStackedBarChart.tsx\";\nimport React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\n\nconst KidneySymptomsStackedBarChart = () => {\n  const [data, setData] = useState([{\n    name: 'Page A',\n    uv: 4000,\n    pv: 2400,\n    amt: 2400\n  }, {\n    name: 'Page B',\n    uv: 3000,\n    pv: 1398,\n    amt: 2210\n  }, {\n    name: 'Page C',\n    uv: 2000,\n    pv: 9800,\n    amt: 2290\n  }, {\n    name: 'Page D',\n    uv: 2780,\n    pv: 3908,\n    amt: 2000\n  }, {\n    name: 'Page E',\n    uv: 1890,\n    pv: 4800,\n    amt: 2181\n  }, {\n    name: 'Page F',\n    uv: 2390,\n    pv: 3800,\n    amt: 2500\n  }, {\n    name: 'Page G',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100\n  }]);\n\n  const fetchData = async () => {\n    const res = await fetch(\"http://localhost:5000/query/approval_count_per_desease\");\n    const data = await res.json().then(data => {\n      setData(data.map(d => {\n        return {\n          name: d._id,\n          approved: d.approved,\n          rejected: d.unapproved,\n          total: d.approved + d.unapproved\n        };\n      }));\n    });\n    console.log(data);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(BarChart, {\n    width: 500,\n    height: 300,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"pv\",\n    stackId: \"a\",\n    fill: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"uv\",\n    stackId: \"a\",\n    fill: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default KidneySymptomsStackedBarChart;","map":{"version":3,"names":["React","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","KidneySymptomsStackedBarChart","data","setData","useState","name","uv","pv","amt","fetchData","res","fetch","json","then","map","d","_id","approved","rejected","unapproved","total","console","log","useEffect","top","right","left","bottom"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/kidneySymptomsStackedBarChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, \r\n    CartesianGrid, Tooltip } from 'recharts';\r\n\r\n\r\nconst KidneySymptomsStackedBarChart = () => {\r\n    const [data, setData] = useState([\r\n        {\r\n            name: 'Page A',\r\n            uv: 4000,\r\n            pv: 2400,\r\n            amt: 2400,\r\n        },\r\n        {\r\n            name: 'Page B',\r\n            uv: 3000,\r\n            pv: 1398,\r\n            amt: 2210,\r\n        },\r\n        {\r\n            name: 'Page C',\r\n            uv: 2000,\r\n            pv: 9800,\r\n            amt: 2290,\r\n        },\r\n        {\r\n            name: 'Page D',\r\n            uv: 2780,\r\n            pv: 3908,\r\n            amt: 2000,\r\n        },\r\n        {\r\n            name: 'Page E',\r\n            uv: 1890,\r\n            pv: 4800,\r\n            amt: 2181,\r\n        },\r\n        {\r\n            name: 'Page F',\r\n            uv: 2390,\r\n            pv: 3800,\r\n            amt: 2500,\r\n        },\r\n        {\r\n            name: 'Page G',\r\n            uv: 3490,\r\n            pv: 4300,\r\n            amt: 2100,\r\n        },\r\n    ]);\r\n\r\n    const fetchData = async () => {\r\n        const res = await fetch(\"http://localhost:5000/query/approval_count_per_desease\");\r\n        const data = await res.json()\r\n        .then(data => {\r\n        setData(data.map((d) => {\r\n            return {\r\n                name: d._id,\r\n                approved: d.approved,\r\n                rejected: d.unapproved,\r\n                total: d.approved + d.unapproved\r\n            }\r\n        }))\r\n        });\r\n        console.log(data);\r\n      }\r\n    \r\n      useEffect(() => {\r\n    \r\n      fetchData();\r\n      }, []);\r\n\r\n    return (\r\n        <BarChart\r\n            width={500}\r\n            height={300}\r\n            data={data}\r\n            margin={{\r\n                top: 5,\r\n                right: 30,\r\n                left: 20,\r\n                bottom: 5,\r\n            }}\r\n        >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Bar dataKey=\"pv\" stackId=\"a\" fill=\"#8884d8\" />\r\n            <Bar dataKey=\"uv\" stackId=\"a\" fill=\"#82ca9d\" />\r\n        </BarChart>\r\n    );\r\n}\r\nexport default KidneySymptomsStackedBarChart"],"mappings":"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"},"metadata":{},"sourceType":"module"}