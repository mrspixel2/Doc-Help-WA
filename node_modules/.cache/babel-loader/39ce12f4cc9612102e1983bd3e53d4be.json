{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\dashboards\\\\dashboard\\\\charts\\\\kidney-polarArea.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport Doughnut from \"react-chartjs-2\";\n\nconst KidneyPolarArea = () => {\n  const [counts, setCounts] = useState([100, 200, 300]);\n  const [labels, setLabels] = useState([\"A\", \"B\", \"C\"]);\n\n  const valueSwitch = param => {\n    switch (param) {\n      case 0:\n        return 'Cyst';\n\n      case 1:\n        return 'Normal';\n\n      case 2:\n        return 'Stone';\n\n      case 3:\n        return 'Tumor';\n    }\n  };\n\n  const fetchData = async () => {\n    const res = await fetch(\"http://localhost:5000/predict/prediction_count_per_kidney_desease\");\n    const data = await res.json().then(data => {\n      setCounts(data.map(d => d.count));\n      setLabels(data.map(d => valueSwitch(d._id)));\n    });\n    console.log(counts);\n    return data;\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const d = {\n    labels: labels,\n    title: 'Predictions per desease',\n    datasets: [{\n      label: \"Predictions per desease\",\n      type: 'pie',\n      backgroundColor: ['rgb(255, 99, 132)', 'rgb(75, 192, 192)', 'rgb(255, 205, 86)', 'rgb(201, 203, 207)'],\n      data: counts\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: d,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default KidneyPolarArea;","map":{"version":3,"names":["React","useEffect","useState","Doughnut","KidneyPolarArea","counts","setCounts","labels","setLabels","valueSwitch","param","fetchData","res","fetch","data","json","then","map","d","count","_id","console","log","title","datasets","label","type","backgroundColor"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/kidney-polarArea.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Doughnut from \"react-chartjs-2\";\r\n\r\n\r\nconst KidneyPolarArea = () => {\r\n\r\n    const [counts, setCounts] = useState([100, 200, 300]);\r\n    const [labels, setLabels] = useState([\"A\", \"B\", \"C\"]);\r\n\r\n    const valueSwitch = (param) => {\r\n            switch (param) {\r\n              case 0: return 'Cyst';\r\n              case 1: return 'Normal';\r\n              case 2: return 'Stone';\r\n              case 3: return 'Tumor';\r\n            }\r\n    }\r\n\r\n\r\n    const fetchData = async () => {\r\n        const res = await fetch(\"http://localhost:5000/predict/prediction_count_per_kidney_desease\");\r\n        const data = await res.json()\r\n            .then(data => {\r\n                setCounts(data.map((d) => d.count));\r\n                setLabels(data.map((d) => valueSwitch(d._id)));\r\n            });\r\n        console.log(counts);\r\n        return data;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    const d = {\r\n        labels: labels,\r\n        title: 'Predictions per desease',\r\n        datasets: [\r\n            {\r\n                label: \"Predictions per desease\",\r\n                type: 'pie',\r\n                backgroundColor: ['rgb(255, 99, 132)',\r\n                'rgb(75, 192, 192)',\r\n                'rgb(255, 205, 86)',\r\n                'rgb(201, 203, 207)'],\r\n                data: counts,\r\n            },\r\n        ],\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Doughnut data={d} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KidneyPolarArea;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAGA,MAAMC,eAAe,GAAG,MAAM;EAE1B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAD,CAApC;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAD,CAApC;;EAEA,MAAMO,WAAW,GAAIC,KAAD,IAAW;IACvB,QAAQA,KAAR;MACE,KAAK,CAAL;QAAQ,OAAO,MAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,QAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,OAAP;;MACR,KAAK,CAAL;QAAQ,OAAO,OAAP;IAJV;EAMP,CAPD;;EAUA,MAAMC,SAAS,GAAG,YAAY;IAC1B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,mEAAD,CAAvB;IACA,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,GACdC,IADc,CACTF,IAAI,IAAI;MACVR,SAAS,CAACQ,IAAI,CAACG,GAAL,CAAUC,CAAD,IAAOA,CAAC,CAACC,KAAlB,CAAD,CAAT;MACAX,SAAS,CAACM,IAAI,CAACG,GAAL,CAAUC,CAAD,IAAOT,WAAW,CAACS,CAAC,CAACE,GAAH,CAA3B,CAAD,CAAT;IACH,CAJc,CAAnB;IAKAC,OAAO,CAACC,GAAR,CAAYjB,MAAZ;IACA,OAAOS,IAAP;EACH,CATD;;EAWAb,SAAS,CAAC,MAAM;IAEZU,SAAS;EACZ,CAHQ,EAGN,EAHM,CAAT;EAMA,MAAMO,CAAC,GAAG;IACNX,MAAM,EAAEA,MADF;IAENgB,KAAK,EAAE,yBAFD;IAGNC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,yBADX;MAEIC,IAAI,EAAE,KAFV;MAGIC,eAAe,EAAE,CAAC,mBAAD,EACjB,mBADiB,EAEjB,mBAFiB,EAGjB,oBAHiB,CAHrB;MAOIb,IAAI,EAAET;IAPV,CADM;EAHJ,CAAV;EAiBA,oBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI,oBAAC,QAAD;IAAU,IAAI,EAAEa,CAAhB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CADJ;AAKH,CAtDD;;AAwDA,eAAed,eAAf"},"metadata":{},"sourceType":"module"}