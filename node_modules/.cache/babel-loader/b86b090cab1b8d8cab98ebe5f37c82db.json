{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnKeyDown\n * @format\n * \n */\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\n\nvar EditorState = require('./EditorState');\n\nvar KeyBindingUtil = require('./KeyBindingUtil');\n\nvar Keys = require('fbjs/lib/Keys');\n\nvar SecondaryClipboard = require('./SecondaryClipboard');\n\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar isEventHandled = require('./isEventHandled');\n\nvar keyCommandBackspaceToStartOfLine = require('./keyCommandBackspaceToStartOfLine');\n\nvar keyCommandBackspaceWord = require('./keyCommandBackspaceWord');\n\nvar keyCommandDeleteWord = require('./keyCommandDeleteWord');\n\nvar keyCommandInsertNewline = require('./keyCommandInsertNewline');\n\nvar keyCommandMoveSelectionToEndOfBlock = require('./keyCommandMoveSelectionToEndOfBlock');\n\nvar keyCommandMoveSelectionToStartOfBlock = require('./keyCommandMoveSelectionToStartOfBlock');\n\nvar keyCommandPlainBackspace = require('./keyCommandPlainBackspace');\n\nvar keyCommandPlainDelete = require('./keyCommandPlainDelete');\n\nvar keyCommandTransposeCharacters = require('./keyCommandTransposeCharacters');\n\nvar keyCommandUndo = require('./keyCommandUndo');\n\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\nvar isChrome = UserAgent.isBrowser('Chrome');\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\n\nfunction onKeyCommand(command, editorState) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState);\n\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n\n    default:\n      return editorState;\n  }\n}\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\n\n\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault(); // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n\n      break;\n\n    case Keys.ESC:\n      e.preventDefault();\n      editor.props.onEscape && editor.props.onEscape(e);\n      return;\n\n    case Keys.TAB:\n      editor.props.onTab && editor.props.onTab(e);\n      return;\n\n    case Keys.UP:\n      editor.props.onUpArrow && editor.props.onUpArrow(e);\n      return;\n\n    case Keys.RIGHT:\n      editor.props.onRightArrow && editor.props.onRightArrow(e);\n      return;\n\n    case Keys.DOWN:\n      editor.props.onDownArrow && editor.props.onDownArrow(e);\n      return;\n\n    case Keys.LEFT:\n      editor.props.onLeftArrow && editor.props.onLeftArrow(e);\n      return;\n\n    case Keys.SPACE:\n      // Handling for OSX where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault(); // Insert a nbsp into the editor.\n\n        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), '\\xA0');\n        editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n        return;\n      }\n\n  }\n\n  var command = editor.props.keyBindingFn(e); // If no command is specified, allow keydown event to continue.\n\n  if (!command) {\n    return;\n  }\n\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  } // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n\n\n  e.preventDefault(); // Allow components higher up the tree to handle the command first.\n\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState))) {\n    return;\n  }\n\n  var newState = onKeyCommand(command, editorState);\n\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\n\nmodule.exports = editOnKeyDown;","map":{"version":3,"names":["DraftModifier","require","EditorState","KeyBindingUtil","Keys","SecondaryClipboard","UserAgent","isEventHandled","keyCommandBackspaceToStartOfLine","keyCommandBackspaceWord","keyCommandDeleteWord","keyCommandInsertNewline","keyCommandMoveSelectionToEndOfBlock","keyCommandMoveSelectionToStartOfBlock","keyCommandPlainBackspace","keyCommandPlainDelete","keyCommandTransposeCharacters","keyCommandUndo","isOptionKeyCommand","isChrome","isBrowser","onKeyCommand","command","editorState","redo","cut","paste","editOnKeyDown","editor","e","keyCode","which","_latestEditorState","RETURN","preventDefault","props","handleReturn","ESC","onEscape","TAB","onTab","UP","onUpArrow","RIGHT","onRightArrow","DOWN","onDownArrow","LEFT","onLeftArrow","SPACE","contentState","replaceText","getCurrentContent","getSelection","update","push","keyBindingFn","handleKeyCommand","newState","module","exports"],"sources":["E:/Work/PFE/Project folder/DocHelp/node_modules/draft-js/lib/editOnKeyDown.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnKeyDown\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar KeyBindingUtil = require('./KeyBindingUtil');\nvar Keys = require('fbjs/lib/Keys');\nvar SecondaryClipboard = require('./SecondaryClipboard');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar isEventHandled = require('./isEventHandled');\nvar keyCommandBackspaceToStartOfLine = require('./keyCommandBackspaceToStartOfLine');\nvar keyCommandBackspaceWord = require('./keyCommandBackspaceWord');\nvar keyCommandDeleteWord = require('./keyCommandDeleteWord');\nvar keyCommandInsertNewline = require('./keyCommandInsertNewline');\nvar keyCommandMoveSelectionToEndOfBlock = require('./keyCommandMoveSelectionToEndOfBlock');\nvar keyCommandMoveSelectionToStartOfBlock = require('./keyCommandMoveSelectionToStartOfBlock');\nvar keyCommandPlainBackspace = require('./keyCommandPlainBackspace');\nvar keyCommandPlainDelete = require('./keyCommandPlainDelete');\nvar keyCommandTransposeCharacters = require('./keyCommandTransposeCharacters');\nvar keyCommandUndo = require('./keyCommandUndo');\n\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\n\nvar isChrome = UserAgent.isBrowser('Chrome');\n\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\nfunction onKeyCommand(command, editorState) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState);\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n    default:\n      return editorState;\n  }\n}\n\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault();\n      // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n      break;\n    case Keys.ESC:\n      e.preventDefault();\n      editor.props.onEscape && editor.props.onEscape(e);\n      return;\n    case Keys.TAB:\n      editor.props.onTab && editor.props.onTab(e);\n      return;\n    case Keys.UP:\n      editor.props.onUpArrow && editor.props.onUpArrow(e);\n      return;\n    case Keys.RIGHT:\n      editor.props.onRightArrow && editor.props.onRightArrow(e);\n      return;\n    case Keys.DOWN:\n      editor.props.onDownArrow && editor.props.onDownArrow(e);\n      return;\n    case Keys.LEFT:\n      editor.props.onLeftArrow && editor.props.onLeftArrow(e);\n      return;\n    case Keys.SPACE:\n      // Handling for OSX where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n        // Insert a nbsp into the editor.\n        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), '\\xA0');\n        editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n        return;\n      }\n  }\n\n  var command = editor.props.keyBindingFn(e);\n\n  // If no command is specified, allow keydown event to continue.\n  if (!command) {\n    return;\n  }\n\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  }\n\n  // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n  e.preventDefault();\n\n  // Allow components higher up the tree to handle the command first.\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState))) {\n    return;\n  }\n\n  var newState = onKeyCommand(command, editorState);\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\n\nmodule.exports = editOnKeyDown;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIM,cAAc,GAAGN,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIO,gCAAgC,GAAGP,OAAO,CAAC,oCAAD,CAA9C;;AACA,IAAIQ,uBAAuB,GAAGR,OAAO,CAAC,2BAAD,CAArC;;AACA,IAAIS,oBAAoB,GAAGT,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIU,uBAAuB,GAAGV,OAAO,CAAC,2BAAD,CAArC;;AACA,IAAIW,mCAAmC,GAAGX,OAAO,CAAC,uCAAD,CAAjD;;AACA,IAAIY,qCAAqC,GAAGZ,OAAO,CAAC,yCAAD,CAAnD;;AACA,IAAIa,wBAAwB,GAAGb,OAAO,CAAC,4BAAD,CAAtC;;AACA,IAAIc,qBAAqB,GAAGd,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIe,6BAA6B,GAAGf,OAAO,CAAC,iCAAD,CAA3C;;AACA,IAAIgB,cAAc,GAAGhB,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAIiB,kBAAkB,GAAGf,cAAc,CAACe,kBAAxC;AAEA,IAAIC,QAAQ,GAAGb,SAAS,CAACc,SAAV,CAAoB,QAApB,CAAf;AAEA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,WAA/B,EAA4C;EAC1C,QAAQD,OAAR;IACE,KAAK,MAAL;MACE,OAAOpB,WAAW,CAACsB,IAAZ,CAAiBD,WAAjB,CAAP;;IACF,KAAK,QAAL;MACE,OAAOR,qBAAqB,CAACQ,WAAD,CAA5B;;IACF,KAAK,aAAL;MACE,OAAOb,oBAAoB,CAACa,WAAD,CAA3B;;IACF,KAAK,WAAL;MACE,OAAOT,wBAAwB,CAACS,WAAD,CAA/B;;IACF,KAAK,gBAAL;MACE,OAAOd,uBAAuB,CAACc,WAAD,CAA9B;;IACF,KAAK,4BAAL;MACE,OAAOf,gCAAgC,CAACe,WAAD,CAAvC;;IACF,KAAK,aAAL;MACE,OAAOZ,uBAAuB,CAACY,WAAD,CAA9B;;IACF,KAAK,sBAAL;MACE,OAAOP,6BAA6B,CAACO,WAAD,CAApC;;IACF,KAAK,kCAAL;MACE,OAAOV,qCAAqC,CAACU,WAAD,CAA5C;;IACF,KAAK,gCAAL;MACE,OAAOX,mCAAmC,CAACW,WAAD,CAA1C;;IACF,KAAK,eAAL;MACE,OAAOlB,kBAAkB,CAACoB,GAAnB,CAAuBF,WAAvB,CAAP;;IACF,KAAK,iBAAL;MACE,OAAOlB,kBAAkB,CAACqB,KAAnB,CAAyBH,WAAzB,CAAP;;IACF;MACE,OAAOA,WAAP;EA1BJ;AA4BD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,aAAT,CAAuBC,MAAvB,EAA+BC,CAA/B,EAAkC;EAChC,IAAIC,OAAO,GAAGD,CAAC,CAACE,KAAhB;EACA,IAAIR,WAAW,GAAGK,MAAM,CAACI,kBAAzB;;EAEA,QAAQF,OAAR;IACE,KAAK1B,IAAI,CAAC6B,MAAV;MACEJ,CAAC,CAACK,cAAF,GADF,CAEE;MACA;;MACA,IAAIN,MAAM,CAACO,KAAP,CAAaC,YAAb,IAA6B7B,cAAc,CAACqB,MAAM,CAACO,KAAP,CAAaC,YAAb,CAA0BP,CAA1B,EAA6BN,WAA7B,CAAD,CAA/C,EAA4F;QAC1F;MACD;;MACD;;IACF,KAAKnB,IAAI,CAACiC,GAAV;MACER,CAAC,CAACK,cAAF;MACAN,MAAM,CAACO,KAAP,CAAaG,QAAb,IAAyBV,MAAM,CAACO,KAAP,CAAaG,QAAb,CAAsBT,CAAtB,CAAzB;MACA;;IACF,KAAKzB,IAAI,CAACmC,GAAV;MACEX,MAAM,CAACO,KAAP,CAAaK,KAAb,IAAsBZ,MAAM,CAACO,KAAP,CAAaK,KAAb,CAAmBX,CAAnB,CAAtB;MACA;;IACF,KAAKzB,IAAI,CAACqC,EAAV;MACEb,MAAM,CAACO,KAAP,CAAaO,SAAb,IAA0Bd,MAAM,CAACO,KAAP,CAAaO,SAAb,CAAuBb,CAAvB,CAA1B;MACA;;IACF,KAAKzB,IAAI,CAACuC,KAAV;MACEf,MAAM,CAACO,KAAP,CAAaS,YAAb,IAA6BhB,MAAM,CAACO,KAAP,CAAaS,YAAb,CAA0Bf,CAA1B,CAA7B;MACA;;IACF,KAAKzB,IAAI,CAACyC,IAAV;MACEjB,MAAM,CAACO,KAAP,CAAaW,WAAb,IAA4BlB,MAAM,CAACO,KAAP,CAAaW,WAAb,CAAyBjB,CAAzB,CAA5B;MACA;;IACF,KAAKzB,IAAI,CAAC2C,IAAV;MACEnB,MAAM,CAACO,KAAP,CAAaa,WAAb,IAA4BpB,MAAM,CAACO,KAAP,CAAaa,WAAb,CAAyBnB,CAAzB,CAA5B;MACA;;IACF,KAAKzB,IAAI,CAAC6C,KAAV;MACE;MACA,IAAI9B,QAAQ,IAAID,kBAAkB,CAACW,CAAD,CAAlC,EAAuC;QACrCA,CAAC,CAACK,cAAF,GADqC,CAErC;;QACA,IAAIgB,YAAY,GAAGlD,aAAa,CAACmD,WAAd,CAA0B5B,WAAW,CAAC6B,iBAAZ,EAA1B,EAA2D7B,WAAW,CAAC8B,YAAZ,EAA3D,EAAuF,MAAvF,CAAnB;QACAzB,MAAM,CAAC0B,MAAP,CAAcpD,WAAW,CAACqD,IAAZ,CAAiBhC,WAAjB,EAA8B2B,YAA9B,EAA4C,mBAA5C,CAAd;QACA;MACD;;EApCL;;EAuCA,IAAI5B,OAAO,GAAGM,MAAM,CAACO,KAAP,CAAaqB,YAAb,CAA0B3B,CAA1B,CAAd,CA3CgC,CA6ChC;;EACA,IAAI,CAACP,OAAL,EAAc;IACZ;EACD;;EAED,IAAIA,OAAO,KAAK,MAAhB,EAAwB;IACtB;IACA;IACAL,cAAc,CAACY,CAAD,EAAIN,WAAJ,EAAiBK,MAAM,CAAC0B,MAAxB,CAAd;IACA;EACD,CAvD+B,CAyDhC;EACA;;;EACAzB,CAAC,CAACK,cAAF,GA3DgC,CA6DhC;;EACA,IAAIN,MAAM,CAACO,KAAP,CAAasB,gBAAb,IAAiClD,cAAc,CAACqB,MAAM,CAACO,KAAP,CAAasB,gBAAb,CAA8BnC,OAA9B,EAAuCC,WAAvC,CAAD,CAAnD,EAA0G;IACxG;EACD;;EAED,IAAImC,QAAQ,GAAGrC,YAAY,CAACC,OAAD,EAAUC,WAAV,CAA3B;;EACA,IAAImC,QAAQ,KAAKnC,WAAjB,EAA8B;IAC5BK,MAAM,CAAC0B,MAAP,CAAcI,QAAd;EACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBjC,aAAjB"},"metadata":{},"sourceType":"script"}