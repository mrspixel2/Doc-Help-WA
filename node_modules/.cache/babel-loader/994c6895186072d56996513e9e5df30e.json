{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nvar _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\tables\\\\FilterAndSorting.tsx\";\nimport React from 'react';\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  filters: [{\n    text: 'Joe',\n    value: 'Joe'\n  }, {\n    text: 'Jim',\n    value: 'Jim'\n  }, {\n    text: 'Submenu',\n    value: 'Submenu',\n    children: [{\n      text: 'Green',\n      value: 'Green'\n    }, {\n      text: 'Black',\n      value: 'Black'\n    }]\n  }],\n  // specify the condition of filtering result\n  // here is that finding the name started with `value`\n  onFilter: (value, record) => record.name.indexOf(value) === 0,\n  sorter: (a, b) => a.name.length - b.name.length,\n  sortDirections: ['descend', 'ascend']\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  defaultSortOrder: 'descend',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  filters: [{\n    text: 'London',\n    value: 'London'\n  }, {\n    text: 'New York',\n    value: 'New York'\n  }],\n  filterMultiple: false,\n  onFilter: (value, record) => record.address.indexOf(value) === 0,\n  sorter: (a, b) => a.address.length - b.address.length,\n  sortDirections: ['descend', 'ascend']\n}];\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park'\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park'\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park'\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park'\n}];\n\nconst FilterAndSorting = () => {\n  return /*#__PURE__*/React.createElement(_Table, {\n    pagination: false,\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default FilterAndSorting;","map":{"version":3,"names":["React","columns","title","dataIndex","filters","text","value","children","onFilter","record","name","indexOf","sorter","a","b","length","sortDirections","defaultSortOrder","age","filterMultiple","address","data","key","FilterAndSorting"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/tables/FilterAndSorting.tsx"],"sourcesContent":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns: any = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    filters: [\n      {\n        text: 'Joe',\n        value: 'Joe'\n      },\n      {\n        text: 'Jim',\n        value: 'Jim'\n      },\n      {\n        text: 'Submenu',\n        value: 'Submenu',\n        children: [\n          {\n            text: 'Green',\n            value: 'Green'\n          },\n          {\n            text: 'Black',\n            value: 'Black'\n          }\n        ]\n      }\n    ],\n    // specify the condition of filtering result\n    // here is that finding the name started with `value`\n    onFilter: (value, record) => record.name.indexOf(value) === 0,\n    sorter: (a, b) => a.name.length - b.name.length,\n    sortDirections: ['descend', 'ascend']\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.age - b.age\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    filters: [\n      {\n        text: 'London',\n        value: 'London'\n      },\n      {\n        text: 'New York',\n        value: 'New York'\n      }\n    ],\n    filterMultiple: false,\n    onFilter: (value, record) => record.address.indexOf(value) === 0,\n    sorter: (a, b) => a.address.length - b.address.length,\n    sortDirections: ['descend', 'ascend']\n  }\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park'\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park'\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park'\n  },\n  {\n    key: '4',\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park'\n  }\n];\n\nconst FilterAndSorting = () => {\n  return <Table pagination={false} columns={columns} dataSource={data} />;\n};\n\nexport default FilterAndSorting;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,OAAY,GAAG,CACnB;EACEC,KAAK,EAAE,MADT;EAEEC,SAAS,EAAE,MAFb;EAGEC,OAAO,EAAE,CACP;IACEC,IAAI,EAAE,KADR;IAEEC,KAAK,EAAE;EAFT,CADO,EAKP;IACED,IAAI,EAAE,KADR;IAEEC,KAAK,EAAE;EAFT,CALO,EASP;IACED,IAAI,EAAE,SADR;IAEEC,KAAK,EAAE,SAFT;IAGEC,QAAQ,EAAE,CACR;MACEF,IAAI,EAAE,OADR;MAEEC,KAAK,EAAE;IAFT,CADQ,EAKR;MACED,IAAI,EAAE,OADR;MAEEC,KAAK,EAAE;IAFT,CALQ;EAHZ,CATO,CAHX;EA2BE;EACA;EACAE,QAAQ,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmBA,MAAM,CAACC,IAAP,CAAYC,OAAZ,CAAoBL,KAApB,MAA+B,CA7B9D;EA8BEM,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACH,IAAF,CAAOK,MAAP,GAAgBD,CAAC,CAACJ,IAAF,CAAOK,MA9B3C;EA+BEC,cAAc,EAAE,CAAC,SAAD,EAAY,QAAZ;AA/BlB,CADmB,EAkCnB;EACEd,KAAK,EAAE,KADT;EAEEC,SAAS,EAAE,KAFb;EAGEc,gBAAgB,EAAE,SAHpB;EAIEL,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACK,GAAF,GAAQJ,CAAC,CAACI;AAJ9B,CAlCmB,EAwCnB;EACEhB,KAAK,EAAE,SADT;EAEEC,SAAS,EAAE,SAFb;EAGEC,OAAO,EAAE,CACP;IACEC,IAAI,EAAE,QADR;IAEEC,KAAK,EAAE;EAFT,CADO,EAKP;IACED,IAAI,EAAE,UADR;IAEEC,KAAK,EAAE;EAFT,CALO,CAHX;EAaEa,cAAc,EAAE,KAblB;EAcEX,QAAQ,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmBA,MAAM,CAACW,OAAP,CAAeT,OAAf,CAAuBL,KAAvB,MAAkC,CAdjE;EAeEM,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACO,OAAF,CAAUL,MAAV,GAAmBD,CAAC,CAACM,OAAF,CAAUL,MAfjD;EAgBEC,cAAc,EAAE,CAAC,SAAD,EAAY,QAAZ;AAhBlB,CAxCmB,CAArB;AA4DA,MAAMK,IAAI,GAAG,CACX;EACEC,GAAG,EAAE,GADP;EAEEZ,IAAI,EAAE,YAFR;EAGEQ,GAAG,EAAE,EAHP;EAIEE,OAAO,EAAE;AAJX,CADW,EAOX;EACEE,GAAG,EAAE,GADP;EAEEZ,IAAI,EAAE,WAFR;EAGEQ,GAAG,EAAE,EAHP;EAIEE,OAAO,EAAE;AAJX,CAPW,EAaX;EACEE,GAAG,EAAE,GADP;EAEEZ,IAAI,EAAE,WAFR;EAGEQ,GAAG,EAAE,EAHP;EAIEE,OAAO,EAAE;AAJX,CAbW,EAmBX;EACEE,GAAG,EAAE,GADP;EAEEZ,IAAI,EAAE,SAFR;EAGEQ,GAAG,EAAE,EAHP;EAIEE,OAAO,EAAE;AAJX,CAnBW,CAAb;;AA2BA,MAAMG,gBAAgB,GAAG,MAAM;EAC7B,oBAAO;IAAO,UAAU,EAAE,KAAnB;IAA0B,OAAO,EAAEtB,OAAnC;IAA4C,UAAU,EAAEoB,IAAxD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAP;AACD,CAFD;;AAIA,eAAeE,gBAAf"},"metadata":{},"sourceType":"module"}