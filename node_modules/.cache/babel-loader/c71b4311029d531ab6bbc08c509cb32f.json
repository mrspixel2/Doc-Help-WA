{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\dashboards\\\\dashboard\\\\charts\\\\predictions-month-linechart.tsx\";\nimport React, { useEffect } from \"react\";\nimport { LineChart, XAxis, YAxis, CartesianGrid, Line, Tooltip, Legend } from 'recharts';\n\nconst PredictionsMonthLinechart = () => {\n  const [data, setData] = useSatete([{\n    month: 'Jan',\n    predictions: 10\n  }, {\n    month: 'Feb',\n    predictions: 20\n  }, {\n    month: 'Mar',\n    predictions: 30\n  }, {\n    month: 'Apr',\n    predictions: 40\n  }, {\n    month: 'May',\n    predictions: 50\n  }, {\n    month: 'Jun',\n    predictions: 60\n  }, {\n    month: 'Jul',\n    predictions: 70\n  }, {\n    month: 'Aug',\n    predictions: 80\n  }, {\n    month: 'Sep',\n    predictions: 90\n  }, {\n    month: 'Oct',\n    predictions: 100\n  }, {\n    month: 'Nov',\n    predictions: 110\n  }, {\n    month: 'Dec',\n    predictions: 120\n  }]);\n\n  const fetchData = async () => {\n    const res = await fetch(\"http://localhost:5000/query/predictions_per_month\");\n    const data = await res.json().then(data => {\n      setData(data.slice(1).map(d => d));\n    });\n    console.log(counts);\n    return data;\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(LineChart, {\n    width: 1100,\n    height: 400,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"month\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"predictions\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PredictionsMonthLinechart;","map":{"version":3,"names":["React","useEffect","LineChart","XAxis","YAxis","CartesianGrid","Line","Tooltip","Legend","PredictionsMonthLinechart","data","setData","useSatete","month","predictions","fetchData","res","fetch","json","then","slice","map","d","console","log","counts","top","right","left","bottom"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/predictions-month-linechart.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    LineChart,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Line,\r\n    Tooltip,\r\n    Legend\r\n} from 'recharts';\r\n\r\nconst PredictionsMonthLinechart = () => {\r\n    const [data, setData] = useSatete([\r\n        {\r\n            month: 'Jan',\r\n            predictions: 10\r\n        },\r\n        {\r\n            month: 'Feb',\r\n            predictions: 20\r\n        },\r\n        {\r\n            month: 'Mar',\r\n            predictions: 30\r\n        },\r\n        {\r\n            month: 'Apr',\r\n            predictions: 40\r\n        },\r\n        {\r\n            month: 'May',\r\n            predictions: 50\r\n        },\r\n        {\r\n            month: 'Jun',\r\n            predictions: 60\r\n        },\r\n        {\r\n            month: 'Jul',\r\n            predictions: 70\r\n        },\r\n        {\r\n            month: 'Aug',\r\n            predictions: 80\r\n        },\r\n        {\r\n            month: 'Sep',\r\n            predictions: 90\r\n        },\r\n        {\r\n            month: 'Oct',\r\n            predictions: 100\r\n        },\r\n        {\r\n            month: 'Nov',\r\n            predictions: 110\r\n        },\r\n        {\r\n            month: 'Dec',\r\n            predictions: 120\r\n        }\r\n    ])\r\n\r\n    const fetchData = async () => {\r\n        const res = await fetch(\"http://localhost:5000/query/predictions_per_month\");\r\n        const data = await res.json()\r\n            .then(data => {\r\n                setData(data.slice(1).map((d) => d));\r\n            });\r\n        console.log(counts);\r\n        return data;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <LineChart width={1100} height={400} data={data}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"month\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"predictions\" stroke=\"#8884d8\" />\r\n\r\n        </LineChart>\r\n    )\r\n}\r\n\r\nexport default PredictionsMonthLinechart;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAA2C,OAA3C;AACA,SACIC,SADJ,EAEIC,KAFJ,EAGIC,KAHJ,EAIIC,aAJJ,EAKIC,IALJ,EAMIC,OANJ,EAOIC,MAPJ,QAQO,UARP;;AAUA,MAAMC,yBAAyB,GAAG,MAAM;EACpC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,SAAS,CAAC,CAC9B;IACIC,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAD8B,EAK9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAL8B,EAS9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAT8B,EAa9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAb8B,EAiB9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAjB8B,EAqB9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CArB8B,EAyB9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAzB8B,EA6B9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CA7B8B,EAiC9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAjC8B,EAqC9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CArC8B,EAyC9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAzC8B,EA6C9B;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CA7C8B,CAAD,CAAjC;;EAmDA,MAAMC,SAAS,GAAG,YAAY;IAC1B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,mDAAD,CAAvB;IACA,MAAMP,IAAI,GAAG,MAAMM,GAAG,CAACE,IAAJ,GACdC,IADc,CACTT,IAAI,IAAI;MACVC,OAAO,CAACD,IAAI,CAACU,KAAL,CAAW,CAAX,EAAcC,GAAd,CAAmBC,CAAD,IAAOA,CAAzB,CAAD,CAAP;IACH,CAHc,CAAnB;IAIAC,OAAO,CAACC,GAAR,CAAYC,MAAZ;IACA,OAAOf,IAAP;EACH,CARD;;EAUAT,SAAS,CAAC,MAAM;IAEZc,SAAS;EACZ,CAHQ,EAGN,EAHM,CAAT;EAMA,oBACI,oBAAC,SAAD;IAAW,KAAK,EAAE,IAAlB;IAAwB,MAAM,EAAE,GAAhC;IAAqC,IAAI,EAAEL,IAA3C;IACI,MAAM,EAAE;MAAEgB,GAAG,EAAE,CAAP;MAAUC,KAAK,EAAE,EAAjB;MAAqBC,IAAI,EAAE,EAA3B;MAA+BC,MAAM,EAAE;IAAvC,CADZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEI,oBAAC,aAAD;IAAe,eAAe,EAAC,KAA/B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFJ,eAGI,oBAAC,KAAD;IAAO,OAAO,EAAC,OAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAHJ,eAII,oBAAC,KAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAJJ,eAKI,oBAAC,OAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EALJ,eAMI,oBAAC,MAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EANJ,eAOI,oBAAC,IAAD;IAAM,IAAI,EAAC,UAAX;IAAsB,OAAO,EAAC,aAA9B;IAA4C,MAAM,EAAC,SAAnD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAPJ,CADJ;AAYH,CAhFD;;AAkFA,eAAepB,yBAAf"},"metadata":{},"sourceType":"module"}