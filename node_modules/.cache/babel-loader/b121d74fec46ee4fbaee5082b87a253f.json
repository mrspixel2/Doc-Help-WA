{"ast":null,"code":"import { BlockMapBuilder, genKey, CharacterMetadata, ContentBlock, convertFromHTML } from 'draft-js';\nimport toArray from 'lodash/toArray';\nimport { List, OrderedSet, Repeat, fromJS } from 'immutable';\n\nfunction compose() {\n  for (var _len = arguments.length, argument = Array(_len), _key = 0; _key < _len; _key++) {\n    argument[_key] = arguments[_key];\n  }\n\n  var args = arguments;\n  var start = args.length - 1;\n  return function () {\n    var i = start;\n    var result = args[start].apply(this, arguments);\n\n    while (i--) {\n      result = args[i].call(this, result);\n    }\n\n    return result;\n  };\n}\n\n;\n/*\n * Helpers\n */\n// Prepares img meta data object based on img attributes\n\nvar getBlockSpecForElement = function getBlockSpecForElement(imgElement) {\n  return {\n    contentType: 'image',\n    src: imgElement.getAttribute('src'),\n    width: imgElement.getAttribute('width'),\n    height: imgElement.getAttribute('height'),\n    align: imgElement.style.cssFloat\n  };\n}; // Wraps meta data in HTML element which is 'understandable' by Draft, I used <blockquote />.\n\n\nvar wrapBlockSpec = function wrapBlockSpec(blockSpec) {\n  if (blockSpec == null) {\n    return null;\n  }\n\n  var tempEl = document.createElement('blockquote'); // stringify meta data and insert it as text content of temp HTML element. We will later extract\n  // and parse it.\n\n  tempEl.innerText = JSON.stringify(blockSpec);\n  return tempEl;\n}; // Replaces <img> element with our temp element\n\n\nvar replaceElement = function replaceElement(oldEl, newEl) {\n  if (!(newEl instanceof HTMLElement)) {\n    return;\n  }\n\n  var parentNode = oldEl.parentNode;\n  return parentNode.replaceChild(newEl, oldEl);\n};\n\nvar elementToBlockSpecElement = compose(wrapBlockSpec, getBlockSpecForElement);\n\nvar imgReplacer = function imgReplacer(imgElement) {\n  return replaceElement(imgElement, elementToBlockSpecElement(imgElement));\n}; // creates ContentBlock based on provided spec\n\n\nvar createContentBlock = function createContentBlock(blockData, contentState) {\n  var key = blockData.key,\n      type = blockData.type,\n      text = blockData.text,\n      data = blockData.data,\n      inlineStyles = blockData.inlineStyles,\n      entityData = blockData.entityData;\n  var blockSpec = {\n    type: type != null ? type : 'unstyled',\n    text: text != null ? text : '',\n    key: key != null ? key : genKey(),\n    data: null,\n    characterList: List([])\n  };\n\n  if (data) {\n    blockSpec.data = fromJS(data);\n  }\n\n  if (inlineStyles || entityData) {\n    var entityKey = void 0;\n\n    if (entityData) {\n      var _type = entityData.type,\n          mutability = entityData.mutability,\n          _data = entityData.data;\n      contentState.createEntity(_type, mutability, _data);\n      entityKey = contentState.getLastCreatedEntityKey();\n    } else {\n      entityKey = null;\n    }\n\n    var style = OrderedSet(inlineStyles || []);\n    var charData = CharacterMetadata.create({\n      style: style,\n      entityKey: entityKey\n    });\n    blockSpec.characterList = List(Repeat(charData, text.length));\n  }\n\n  return new ContentBlock(blockSpec);\n}; // takes HTML string and returns DraftJS ContentState\n\n\nexport default function customHTML2Content(HTML, contentState) {\n  var tempDoc = new DOMParser().parseFromString(HTML, 'text/html'); // replace all <img /> with <blockquote /> elements\n\n  toArray(tempDoc.querySelectorAll('img')).forEach(imgReplacer); // use DraftJS converter to do initial conversion. I don't provide DOMBuilder and\n  // blockRenderMap arguments here since it should fall back to its default ones, which are fine\n\n  var _convertFromHTML = convertFromHTML(tempDoc.body.innerHTML),\n      contentBlocks = _convertFromHTML.contentBlocks; // now replace <blockquote /> ContentBlocks with 'atomic' ones\n\n\n  contentBlocks = contentBlocks.reduce(function (contentBlocks, block) {\n    if (block.getType() !== 'blockquote') {\n      return contentBlocks.concat(block);\n    }\n\n    var image = JSON.parse(block.getText());\n    contentState.createEntity('IMAGE-ENTITY', 'IMMUTABLE', image);\n    var entityKey = contentState.getLastCreatedEntityKey();\n    var charData = CharacterMetadata.create({\n      entity: entityKey\n    }); // const blockSpec = Object.assign({ type: 'atomic', text: ' ' }, { entityData })\n    // const atomicBlock = createContentBlock(blockSpec)\n    // const spacerBlock = createContentBlock({});\n\n    var fragmentArray = [new ContentBlock({\n      key: genKey(),\n      type: 'image-block',\n      text: ' ',\n      characterList: List(Repeat(charData, charData.count()))\n    }), new ContentBlock({\n      key: genKey(),\n      type: 'unstyled',\n      text: '',\n      characterList: List()\n    })];\n    return contentBlocks.concat(fragmentArray);\n  }, []); // console.log('>> customHTML2Content contentBlocks', contentBlocks);\n\n  tempDoc = null;\n  return BlockMapBuilder.createFromArray(contentBlocks);\n}","map":{"version":3,"names":["BlockMapBuilder","genKey","CharacterMetadata","ContentBlock","convertFromHTML","toArray","List","OrderedSet","Repeat","fromJS","compose","_len","arguments","length","argument","Array","_key","args","start","i","result","apply","call","getBlockSpecForElement","imgElement","contentType","src","getAttribute","width","height","align","style","cssFloat","wrapBlockSpec","blockSpec","tempEl","document","createElement","innerText","JSON","stringify","replaceElement","oldEl","newEl","HTMLElement","parentNode","replaceChild","elementToBlockSpecElement","imgReplacer","createContentBlock","blockData","contentState","key","type","text","data","inlineStyles","entityData","characterList","entityKey","_type","mutability","_data","createEntity","getLastCreatedEntityKey","charData","create","customHTML2Content","HTML","tempDoc","DOMParser","parseFromString","querySelectorAll","forEach","_convertFromHTML","body","innerHTML","contentBlocks","reduce","block","getType","concat","image","parse","getText","entity","fragmentArray","count","createFromArray"],"sources":["E:/Work/PFE/Project folder/DocHelp/node_modules/rc-editor-core/es/EditorCore/customHTML2Content.js"],"sourcesContent":["import { BlockMapBuilder, genKey, CharacterMetadata, ContentBlock, convertFromHTML } from 'draft-js';\nimport toArray from 'lodash/toArray';\nimport { List, OrderedSet, Repeat, fromJS } from 'immutable';\nfunction compose() {\n    for (var _len = arguments.length, argument = Array(_len), _key = 0; _key < _len; _key++) {\n        argument[_key] = arguments[_key];\n    }\n\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) {\n            result = args[i].call(this, result);\n        }return result;\n    };\n}\n;\n/*\n * Helpers\n */\n// Prepares img meta data object based on img attributes\nvar getBlockSpecForElement = function getBlockSpecForElement(imgElement) {\n    return {\n        contentType: 'image',\n        src: imgElement.getAttribute('src'),\n        width: imgElement.getAttribute('width'),\n        height: imgElement.getAttribute('height'),\n        align: imgElement.style.cssFloat\n    };\n};\n// Wraps meta data in HTML element which is 'understandable' by Draft, I used <blockquote />.\nvar wrapBlockSpec = function wrapBlockSpec(blockSpec) {\n    if (blockSpec == null) {\n        return null;\n    }\n    var tempEl = document.createElement('blockquote');\n    // stringify meta data and insert it as text content of temp HTML element. We will later extract\n    // and parse it.\n    tempEl.innerText = JSON.stringify(blockSpec);\n    return tempEl;\n};\n// Replaces <img> element with our temp element\nvar replaceElement = function replaceElement(oldEl, newEl) {\n    if (!(newEl instanceof HTMLElement)) {\n        return;\n    }\n    var parentNode = oldEl.parentNode;\n    return parentNode.replaceChild(newEl, oldEl);\n};\nvar elementToBlockSpecElement = compose(wrapBlockSpec, getBlockSpecForElement);\nvar imgReplacer = function imgReplacer(imgElement) {\n    return replaceElement(imgElement, elementToBlockSpecElement(imgElement));\n};\n// creates ContentBlock based on provided spec\nvar createContentBlock = function createContentBlock(blockData, contentState) {\n    var key = blockData.key,\n        type = blockData.type,\n        text = blockData.text,\n        data = blockData.data,\n        inlineStyles = blockData.inlineStyles,\n        entityData = blockData.entityData;\n\n    var blockSpec = {\n        type: type != null ? type : 'unstyled',\n        text: text != null ? text : '',\n        key: key != null ? key : genKey(),\n        data: null,\n        characterList: List([])\n    };\n    if (data) {\n        blockSpec.data = fromJS(data);\n    }\n    if (inlineStyles || entityData) {\n        var entityKey = void 0;\n        if (entityData) {\n            var _type = entityData.type,\n                mutability = entityData.mutability,\n                _data = entityData.data;\n\n            contentState.createEntity(_type, mutability, _data);\n            entityKey = contentState.getLastCreatedEntityKey();\n        } else {\n            entityKey = null;\n        }\n        var style = OrderedSet(inlineStyles || []);\n        var charData = CharacterMetadata.create({ style: style, entityKey: entityKey });\n        blockSpec.characterList = List(Repeat(charData, text.length));\n    }\n    return new ContentBlock(blockSpec);\n};\n// takes HTML string and returns DraftJS ContentState\nexport default function customHTML2Content(HTML, contentState) {\n    var tempDoc = new DOMParser().parseFromString(HTML, 'text/html');\n    // replace all <img /> with <blockquote /> elements\n    toArray(tempDoc.querySelectorAll('img')).forEach(imgReplacer);\n    // use DraftJS converter to do initial conversion. I don't provide DOMBuilder and\n    // blockRenderMap arguments here since it should fall back to its default ones, which are fine\n\n    var _convertFromHTML = convertFromHTML(tempDoc.body.innerHTML),\n        contentBlocks = _convertFromHTML.contentBlocks;\n    // now replace <blockquote /> ContentBlocks with 'atomic' ones\n\n\n    contentBlocks = contentBlocks.reduce(function (contentBlocks, block) {\n        if (block.getType() !== 'blockquote') {\n            return contentBlocks.concat(block);\n        }\n        var image = JSON.parse(block.getText());\n        contentState.createEntity('IMAGE-ENTITY', 'IMMUTABLE', image);\n        var entityKey = contentState.getLastCreatedEntityKey();\n        var charData = CharacterMetadata.create({ entity: entityKey });\n        // const blockSpec = Object.assign({ type: 'atomic', text: ' ' }, { entityData })\n        // const atomicBlock = createContentBlock(blockSpec)\n        // const spacerBlock = createContentBlock({});\n        var fragmentArray = [new ContentBlock({\n            key: genKey(),\n            type: 'image-block',\n            text: ' ',\n            characterList: List(Repeat(charData, charData.count()))\n        }), new ContentBlock({\n            key: genKey(),\n            type: 'unstyled',\n            text: '',\n            characterList: List()\n        })];\n        return contentBlocks.concat(fragmentArray);\n    }, []);\n    // console.log('>> customHTML2Content contentBlocks', contentBlocks);\n    tempDoc = null;\n    return BlockMapBuilder.createFromArray(contentBlocks);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}