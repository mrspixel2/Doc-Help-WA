{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\dashboards\\\\dashboard\\\\charts\\\\predictions-month-linechart.tsx\";\nimport React, { useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst PredictionsPerMonth = () => {\n  const [counts, setCounts] = useState([{\n    month: 'January',\n    predictions: 5\n  }, {\n    month: 'February',\n    predictions: 10\n  }, {\n    month: 'March',\n    predictions: 20\n  }, {\n    month: 'April',\n    predictions: 13\n  }, {\n    month: 'May',\n    predictions: 24\n  }, {\n    month: 'June',\n    predictions: 25\n  }, {\n    month: 'July',\n    predictions: 30\n  }, {\n    month: 'August',\n    predictions: 10\n  }, {\n    month: 'September',\n    predictions: 15\n  }, {\n    month: 'October',\n    predictions: 40\n  }, {\n    month: 'November',\n    predictions: 20\n  }, {\n    month: 'December',\n    predictions: 22\n  }]);\n  /*const fetchData = async () => {\r\n      const res = await fetch(\"http://localhost:5000/query/approval_count_per_desease\");\r\n      const data = await res.json()\r\n          .then(data => {\r\n              setCounts(data.map((d) => {\r\n                  return {\r\n                      name: d._id,\r\n                      approved: d.approved,\r\n                      rejected: d.unapproved,\r\n                      total: d.approved + d.unapproved\r\n                  }\r\n              }))\r\n          });\r\n      console.log(data);\r\n  }\r\n    useEffect(() => {\r\n        fetchData();\r\n  }, []);\r\n  */\n\n  return /*#__PURE__*/React.createElement(LineChart, {\n    width: 1100,\n    height: 350,\n    data: counts,\n    margin: {\n      top: 5,\n      right: 10,\n      left: 10,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"month\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"predictions\",\n    stroke: \"#8884d8\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default PredictionsPerMonth;","map":{"version":3,"names":["React","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","PredictionsPerMonth","counts","setCounts","month","predictions","top","right","left","bottom","r"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/predictions-month-linechart.tsx"],"sourcesContent":["import React, { PureComponent, useEffect, useState } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n\r\n\r\nconst PredictionsPerMonth = () => {\r\n\r\n\r\n    const [counts, setCounts] = useState([{\r\n        month: 'January',\r\n        predictions: 5\r\n    },\r\n    {\r\n        month: 'February',\r\n        predictions: 10\r\n    },\r\n    {\r\n        month: 'March',\r\n        predictions: 20\r\n    },\r\n    {\r\n        month: 'April',\r\n        predictions: 13\r\n    },\r\n    {\r\n        month: 'May',\r\n        predictions: 24\r\n    },\r\n    {\r\n        month: 'June',\r\n        predictions: 25\r\n    },\r\n    {\r\n        month: 'July',\r\n        predictions: 30\r\n    },\r\n    {\r\n        month: 'August',\r\n        predictions: 10\r\n    },\r\n    {\r\n        month: 'September',\r\n        predictions: 15\r\n    },\r\n    {\r\n        month: 'October',\r\n        predictions: 40\r\n    },\r\n    {\r\n        month: 'November',\r\n        predictions: 20\r\n    },\r\n    {\r\n        month: 'December',\r\n        predictions: 22\r\n    }\r\n]);\r\n\r\n    /*const fetchData = async () => {\r\n        const res = await fetch(\"http://localhost:5000/query/approval_count_per_desease\");\r\n        const data = await res.json()\r\n            .then(data => {\r\n                setCounts(data.map((d) => {\r\n                    return {\r\n                        name: d._id,\r\n                        approved: d.approved,\r\n                        rejected: d.unapproved,\r\n                        total: d.approved + d.unapproved\r\n                    }\r\n                }))\r\n            });\r\n        console.log(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetchData();\r\n    }, []);\r\n*/\r\n    return (\r\n            <LineChart\r\n                width={1100}\r\n                height={350}\r\n                data={counts}\r\n                margin={{\r\n                    top: 5,\r\n                    right: 10,\r\n                    left: 10,\r\n                    bottom: 5,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"month\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"predictions\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n            </LineChart>\r\n    );\r\n}\r\n\r\nexport default PredictionsPerMonth;"],"mappings":";AAAA,OAAOA,KAAP,IAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,aAAxC,EAAuDC,OAAvD,EAAgEC,MAAhE,QAAmG,UAAnG;;AAIA,MAAMC,mBAAmB,GAAG,MAAM;EAG9B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,CAAC;IAClCW,KAAK,EAAE,SAD2B;IAElCC,WAAW,EAAE;EAFqB,CAAD,EAIrC;IACID,KAAK,EAAE,UADX;IAEIC,WAAW,EAAE;EAFjB,CAJqC,EAQrC;IACID,KAAK,EAAE,OADX;IAEIC,WAAW,EAAE;EAFjB,CARqC,EAYrC;IACID,KAAK,EAAE,OADX;IAEIC,WAAW,EAAE;EAFjB,CAZqC,EAgBrC;IACID,KAAK,EAAE,KADX;IAEIC,WAAW,EAAE;EAFjB,CAhBqC,EAoBrC;IACID,KAAK,EAAE,MADX;IAEIC,WAAW,EAAE;EAFjB,CApBqC,EAwBrC;IACID,KAAK,EAAE,MADX;IAEIC,WAAW,EAAE;EAFjB,CAxBqC,EA4BrC;IACID,KAAK,EAAE,QADX;IAEIC,WAAW,EAAE;EAFjB,CA5BqC,EAgCrC;IACID,KAAK,EAAE,WADX;IAEIC,WAAW,EAAE;EAFjB,CAhCqC,EAoCrC;IACID,KAAK,EAAE,SADX;IAEIC,WAAW,EAAE;EAFjB,CApCqC,EAwCrC;IACID,KAAK,EAAE,UADX;IAEIC,WAAW,EAAE;EAFjB,CAxCqC,EA4CrC;IACID,KAAK,EAAE,UADX;IAEIC,WAAW,EAAE;EAFjB,CA5CqC,CAAD,CAApC;EAkDA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGI,oBACQ,oBAAC,SAAD;IACI,KAAK,EAAE,IADX;IAEI,MAAM,EAAE,GAFZ;IAGI,IAAI,EAAEH,MAHV;IAII,MAAM,EAAE;MACJI,GAAG,EAAE,CADD;MAEJC,KAAK,EAAE,EAFH;MAGJC,IAAI,EAAE,EAHF;MAIJC,MAAM,EAAE;IAJJ,CAJZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAWI,oBAAC,aAAD;IAAe,eAAe,EAAC,KAA/B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAXJ,eAYI,oBAAC,KAAD;IAAO,OAAO,EAAC,OAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAZJ,eAaI,oBAAC,KAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAbJ,eAcI,oBAAC,OAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAdJ,eAeI,oBAAC,MAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAfJ,eAgBI,oBAAC,IAAD;IAAM,IAAI,EAAC,UAAX;IAAsB,OAAO,EAAC,aAA9B;IAA4C,MAAM,EAAC,SAAnD;IAA6D,SAAS,EAAE;MAAEC,CAAC,EAAE;IAAL,CAAxE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAhBJ,CADR;AAoBH,CA9FD;;AAgGA,eAAeT,mBAAf"},"metadata":{},"sourceType":"module"}