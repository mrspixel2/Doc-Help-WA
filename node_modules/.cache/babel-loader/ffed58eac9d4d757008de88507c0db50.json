{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nvar _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\medic\\\\components\\\\BillingTable.tsx\";\nimport React from 'react';\nconst columns = [{\n  key: 'billNo',\n  title: 'Bill #',\n  sorter: (a, b) => a.billNo - b.billNo,\n  className: 'text-align-rigth',\n  render: _ref => {\n    let {\n      billNo\n    } = _ref;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-right text-color-200\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 29\n      }\n    }, billNo);\n  }\n}, {\n  key: 'patient',\n  title: 'Patient',\n  sorter: (a, b) => a.patient.localeCompare(b.patient),\n  render: _ref2 => {\n    let {\n      patient\n    } = _ref2;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-align-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 30\n      }\n    }, patient);\n  }\n}, {\n  key: 'doctor',\n  title: 'Doctor',\n  sorter: (a, b) => a.doctor.localeCompare(b.doctor),\n  render: _ref3 => {\n    let {\n      doctor\n    } = _ref3;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 29\n      }\n    }, doctor);\n  }\n}, {\n  key: 'billDate',\n  title: 'Date',\n  className: 'nowrap',\n  sorter: (a, b) => a.billDate.localeCompare(b.billDate),\n  render: _ref4 => {\n    let {\n      billDate\n    } = _ref4;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-align-left text-color-200\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 31\n      }\n    }, billDate);\n  }\n}, {\n  key: 'charges',\n  title: 'Charges',\n  render: _ref5 => {\n    let {\n      charges\n    } = _ref5;\n    return charges;\n  }\n}, {\n  key: 'tax',\n  title: 'Tax',\n  render: _ref6 => {\n    let {\n      tax\n    } = _ref6;\n    return tax;\n  }\n}, {\n  key: 'discount',\n  title: 'Discount',\n  render: _ref7 => {\n    let {\n      discount\n    } = _ref7;\n    return discount;\n  }\n}, {\n  key: 'total',\n  title: 'Total',\n  render: _ref8 => {\n    let {\n      total\n    } = _ref8;\n    return /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 28\n      }\n    }, total);\n  }\n}];\nconst tableClasses = {\n  accent: 'accent-header',\n  none: ''\n};\n\nconst BillingTable = _ref9 => {\n  let {\n    billings,\n    pagination = false,\n    type = 'none'\n  } = _ref9;\n  const tableClass = tableClasses[type];\n  return /*#__PURE__*/React.createElement(_Table, {\n    className: tableClass,\n    pagination: pagination,\n    rowKey: \"billNo\",\n    dataSource: billings,\n    columns: columns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default BillingTable;","map":{"version":3,"names":["React","columns","key","title","sorter","a","b","billNo","className","render","patient","localeCompare","doctor","billDate","charges","tax","discount","total","tableClasses","accent","none","BillingTable","billings","pagination","type","tableClass"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/medic/components/BillingTable.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Table } from 'antd';\nimport { ColumnProps, TableProps } from 'antd/es/table';\n\nimport { IBilling } from '../../../interfaces/patient';\n\nconst columns: ColumnProps<IBilling>[] = [\n  {\n    key: 'billNo',\n    title: 'Bill #',\n    sorter: (a, b) => a.billNo - b.billNo,\n    className: 'text-align-rigth',\n    render: ({ billNo }) => <span className='text-right text-color-200'>{billNo}</span>\n  },\n  {\n    key: 'patient',\n    title: 'Patient',\n    sorter: (a, b) => a.patient.localeCompare(b.patient),\n    render: ({ patient }) => <span className='text-align-left'>{patient}</span>\n  },\n  {\n    key: 'doctor',\n    title: 'Doctor',\n    sorter: (a, b) => a.doctor.localeCompare(b.doctor),\n    render: ({ doctor }) => <span className='text-left'>{doctor}</span>\n  },\n  {\n    key: 'billDate',\n    title: 'Date',\n    className: 'nowrap',\n    sorter: (a, b) => a.billDate.localeCompare(b.billDate),\n    render: ({ billDate }) => <span className='text-align-left text-color-200'>{billDate}</span>\n  },\n  {\n    key: 'charges',\n    title: 'Charges',\n    render: ({ charges }) => charges\n  },\n  {\n    key: 'tax',\n    title: 'Tax',\n    render: ({ tax }) => tax\n  },\n  {\n    key: 'discount',\n    title: 'Discount',\n    render: ({ discount }) => discount\n  },\n  {\n    key: 'total',\n    title: 'Total',\n    render: ({ total }) => <b>{total}</b>\n  }\n];\n\ntype Props = {\n  billings: IBilling[];\n  pagination?: TableProps<any>['pagination'];\n  type?: 'accent' | 'none';\n};\n\nconst tableClasses = {\n  accent: 'accent-header',\n  none: ''\n};\n\nconst BillingTable = ({ billings, pagination = false, type = 'none' }: Props) => {\n  const tableClass = tableClasses[type];\n\n  return (\n    <Table\n      className={tableClass}\n      pagination={pagination}\n      rowKey='billNo'\n      dataSource={billings}\n      columns={columns}\n    />\n  );\n};\n\nexport default BillingTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}