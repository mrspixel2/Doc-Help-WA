{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEntityKeyForSelection\n * @format\n * \n */\n'use strict';\n/**\n * Return the entity key that should be used when inserting text for the\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\n * and `SEGMENTED` entities should not be used for insertion behavior.\n */\n\nfunction getEntityKeyForSelection(contentState, targetSelection) {\n  var entityKey;\n\n  if (targetSelection.isCollapsed()) {\n    var key = targetSelection.getAnchorKey();\n    var offset = targetSelection.getAnchorOffset();\n\n    if (offset > 0) {\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\n        return null;\n      }\n\n      return filterKey(contentState.getEntityMap(), entityKey);\n    }\n\n    return null;\n  }\n\n  var startKey = targetSelection.getStartKey();\n  var startOffset = targetSelection.getStartOffset();\n  var startBlock = contentState.getBlockForKey(startKey);\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n  return filterKey(contentState.getEntityMap(), entityKey);\n}\n/**\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\n * return it. If not, return null.\n */\n\n\nfunction filterKey(entityMap, entityKey) {\n  if (entityKey) {\n    var entity = entityMap.__get(entityKey);\n\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\n  }\n\n  return null;\n}\n\nmodule.exports = getEntityKeyForSelection;","map":{"version":3,"names":["getEntityKeyForSelection","contentState","targetSelection","entityKey","isCollapsed","key","getAnchorKey","offset","getAnchorOffset","getBlockForKey","getEntityAt","filterKey","getEntityMap","startKey","getStartKey","startOffset","getStartOffset","startBlock","getLength","entityMap","entity","__get","getMutability","module","exports"],"sources":["E:/Work/PFE/Project folder/react/node_modules/draft-js/lib/getEntityKeyForSelection.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEntityKeyForSelection\n * @format\n * \n */\n\n'use strict';\n\n/**\n * Return the entity key that should be used when inserting text for the\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\n * and `SEGMENTED` entities should not be used for insertion behavior.\n */\nfunction getEntityKeyForSelection(contentState, targetSelection) {\n  var entityKey;\n\n  if (targetSelection.isCollapsed()) {\n    var key = targetSelection.getAnchorKey();\n    var offset = targetSelection.getAnchorOffset();\n    if (offset > 0) {\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n      if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\n        return null;\n      }\n      return filterKey(contentState.getEntityMap(), entityKey);\n    }\n    return null;\n  }\n\n  var startKey = targetSelection.getStartKey();\n  var startOffset = targetSelection.getStartOffset();\n  var startBlock = contentState.getBlockForKey(startKey);\n\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n\n  return filterKey(contentState.getEntityMap(), entityKey);\n}\n\n/**\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\n * return it. If not, return null.\n */\nfunction filterKey(entityMap, entityKey) {\n  if (entityKey) {\n    var entity = entityMap.__get(entityKey);\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\n  }\n  return null;\n}\n\nmodule.exports = getEntityKeyForSelection;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,wBAAT,CAAkCC,YAAlC,EAAgDC,eAAhD,EAAiE;EAC/D,IAAIC,SAAJ;;EAEA,IAAID,eAAe,CAACE,WAAhB,EAAJ,EAAmC;IACjC,IAAIC,GAAG,GAAGH,eAAe,CAACI,YAAhB,EAAV;IACA,IAAIC,MAAM,GAAGL,eAAe,CAACM,eAAhB,EAAb;;IACA,IAAID,MAAM,GAAG,CAAb,EAAgB;MACdJ,SAAS,GAAGF,YAAY,CAACQ,cAAb,CAA4BJ,GAA5B,EAAiCK,WAAjC,CAA6CH,MAAM,GAAG,CAAtD,CAAZ;;MACA,IAAIJ,SAAS,KAAKF,YAAY,CAACQ,cAAb,CAA4BJ,GAA5B,EAAiCK,WAAjC,CAA6CH,MAA7C,CAAlB,EAAwE;QACtE,OAAO,IAAP;MACD;;MACD,OAAOI,SAAS,CAACV,YAAY,CAACW,YAAb,EAAD,EAA8BT,SAA9B,CAAhB;IACD;;IACD,OAAO,IAAP;EACD;;EAED,IAAIU,QAAQ,GAAGX,eAAe,CAACY,WAAhB,EAAf;EACA,IAAIC,WAAW,GAAGb,eAAe,CAACc,cAAhB,EAAlB;EACA,IAAIC,UAAU,GAAGhB,YAAY,CAACQ,cAAb,CAA4BI,QAA5B,CAAjB;EAEAV,SAAS,GAAGY,WAAW,KAAKE,UAAU,CAACC,SAAX,EAAhB,GAAyC,IAAzC,GAAgDD,UAAU,CAACP,WAAX,CAAuBK,WAAvB,CAA5D;EAEA,OAAOJ,SAAS,CAACV,YAAY,CAACW,YAAb,EAAD,EAA8BT,SAA9B,CAAhB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASQ,SAAT,CAAmBQ,SAAnB,EAA8BhB,SAA9B,EAAyC;EACvC,IAAIA,SAAJ,EAAe;IACb,IAAIiB,MAAM,GAAGD,SAAS,CAACE,KAAV,CAAgBlB,SAAhB,CAAb;;IACA,OAAOiB,MAAM,CAACE,aAAP,OAA2B,SAA3B,GAAuCnB,SAAvC,GAAmD,IAA1D;EACD;;EACD,OAAO,IAAP;AACD;;AAEDoB,MAAM,CAACC,OAAP,GAAiBxB,wBAAjB"},"metadata":{},"sourceType":"script"}