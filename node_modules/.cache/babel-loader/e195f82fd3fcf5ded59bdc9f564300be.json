{"ast":null,"code":"let year;\nlet months;\n\nconst httpGet = async () => {\n  const response = await fetch(\"http://localhost:5000/query/predictions_per_month\", {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json().then(data => {\n    data.map(d => {\n      year = d._id;\n    }, []);\n    data.slice(1).map(d => {\n      months = d.months;\n    }, []);\n  });\n};\n\nhttpGet().then(response => {\n  console.log(response);\n});\nexport default {\n  color: '#336cfb',\n  tooltip: {\n    trigger: 'none',\n    axisPointer: {\n      type: 'cross'\n    }\n  },\n  legend: {\n    data: year\n  },\n  grid: {\n    left: 30,\n    right: 0,\n    top: 50,\n    bottom: 50\n  },\n  xAxis: [{\n    type: 'category',\n    axisTick: {\n      alignWithLabel: true\n    },\n    axisLine: {\n      onZero: false,\n      lineStyle: {\n        color: '#336cfb'\n      }\n    },\n    axisPointer: {\n      label: {\n        formatter: function (params) {\n          return 'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n        }\n      }\n    },\n    data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  }],\n  yAxis: [{\n    type: 'value'\n  }],\n  series: [{\n    name: 'patients 2019',\n    type: 'line',\n    smooth: true,\n    data: [95, 124, 132, 143, 138, 178, 194, 211, 234, 257, 241, 226]\n  }]\n};","map":{"version":3,"names":["year","months","httpGet","response","fetch","method","headers","Accept","data","json","then","map","d","_id","slice","console","log","color","tooltip","trigger","axisPointer","type","legend","grid","left","right","top","bottom","xAxis","axisTick","alignWithLabel","axisLine","onZero","lineStyle","label","formatter","params","value","seriesData","length","yAxis","series","name","smooth"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/predictions-month-linechart.tsx"],"sourcesContent":["interface Months{\r\n    month: string;\r\n    count: number;\r\n}\r\n\r\nlet year: number;\r\nlet months: Months;\r\nconst httpGet = async () => {\r\n    const response = await fetch(\"http://localhost:5000/query/predictions_per_month\", {\r\n        method: \"GET\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n    const data = await response.json()\r\n    .then((data) => {\r\n        data.map((d) => {\r\n            year = d._id;\r\n        }, []);\r\n        data.slice(1).map((d) => {\r\n            months = d.months;\r\n        }, []);\r\n    })\r\n};\r\nhttpGet().then((response) => {\r\n    console.log(response);\r\n})\r\n\r\nexport default {\r\n    color: '#336cfb',\r\n    tooltip: {\r\n        trigger: 'none',\r\n        axisPointer: {\r\n            type: 'cross'\r\n        }\r\n    },\r\n    legend: {\r\n        data: year\r\n    },\r\n    grid: {\r\n        left: 30,\r\n        right: 0,\r\n        top: 50,\r\n        bottom: 50\r\n    },\r\n    xAxis: [\r\n        {\r\n            type: 'category',\r\n            axisTick: {\r\n                alignWithLabel: true\r\n            },\r\n            axisLine: {\r\n                onZero: false,\r\n                lineStyle: {\r\n                    color: '#336cfb'\r\n                }\r\n            },\r\n            axisPointer: {\r\n                label: {\r\n                    formatter: function (params) {\r\n                        return (\r\n                            'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '')\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n            data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n        }\r\n    ],\r\n    yAxis: [\r\n        {\r\n            type: 'value'\r\n        }\r\n    ],\r\n    series: [\r\n        {\r\n            name: 'patients 2019',\r\n            type: 'line',\r\n            smooth: true,\r\n            data: [95, 124, 132, 143, 138, 178, 194, 211, 234, 257, 241, 226]\r\n        }\r\n    ]\r\n};\r\n"],"mappings":"AAKA,IAAIA,IAAJ;AACA,IAAIC,MAAJ;;AACA,MAAMC,OAAO,GAAG,YAAY;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAD,EAAsD;IAC9EC,MAAM,EAAE,KADsE;IAE9EC,OAAO,EAAE;MACLC,MAAM,EAAE,kBADH;MAEL,gBAAgB;IAFX;EAFqE,CAAtD,CAA5B;EAOA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,GAClBC,IADkB,CACZF,IAAD,IAAU;IACZA,IAAI,CAACG,GAAL,CAAUC,CAAD,IAAO;MACZZ,IAAI,GAAGY,CAAC,CAACC,GAAT;IACH,CAFD,EAEG,EAFH;IAGAL,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcH,GAAd,CAAmBC,CAAD,IAAO;MACrBX,MAAM,GAAGW,CAAC,CAACX,MAAX;IACH,CAFD,EAEG,EAFH;EAGH,CARkB,CAAnB;AASH,CAjBD;;AAkBAC,OAAO,GAAGQ,IAAV,CAAgBP,QAAD,IAAc;EACzBY,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACH,CAFD;AAIA,eAAe;EACXc,KAAK,EAAE,SADI;EAEXC,OAAO,EAAE;IACLC,OAAO,EAAE,MADJ;IAELC,WAAW,EAAE;MACTC,IAAI,EAAE;IADG;EAFR,CAFE;EAQXC,MAAM,EAAE;IACJd,IAAI,EAAER;EADF,CARG;EAWXuB,IAAI,EAAE;IACFC,IAAI,EAAE,EADJ;IAEFC,KAAK,EAAE,CAFL;IAGFC,GAAG,EAAE,EAHH;IAIFC,MAAM,EAAE;EAJN,CAXK;EAiBXC,KAAK,EAAE,CACH;IACIP,IAAI,EAAE,UADV;IAEIQ,QAAQ,EAAE;MACNC,cAAc,EAAE;IADV,CAFd;IAKIC,QAAQ,EAAE;MACNC,MAAM,EAAE,KADF;MAENC,SAAS,EAAE;QACPhB,KAAK,EAAE;MADA;IAFL,CALd;IAWIG,WAAW,EAAE;MACTc,KAAK,EAAE;QACHC,SAAS,EAAE,UAAUC,MAAV,EAAkB;UACzB,OACI,cAAcA,MAAM,CAACC,KAArB,IAA8BD,MAAM,CAACE,UAAP,CAAkBC,MAAlB,GAA2B,MAAMH,MAAM,CAACE,UAAP,CAAkB,CAAlB,EAAqB9B,IAAtD,GAA6D,EAA3F,CADJ;QAGH;MALE;IADE,CAXjB;IAoBIA,IAAI,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E;EApBV,CADG,CAjBI;EAyCXgC,KAAK,EAAE,CACH;IACInB,IAAI,EAAE;EADV,CADG,CAzCI;EA8CXoB,MAAM,EAAE,CACJ;IACIC,IAAI,EAAE,eADV;IAEIrB,IAAI,EAAE,MAFV;IAGIsB,MAAM,EAAE,IAHZ;IAIInC,IAAI,EAAE,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,EAAkD,GAAlD,EAAuD,GAAvD;EAJV,CADI;AA9CG,CAAf"},"metadata":{},"sourceType":"module"}