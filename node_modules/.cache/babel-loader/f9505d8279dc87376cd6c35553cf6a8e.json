{"ast":null,"code":"import { ADD_PATIENT, DELETE_PATIENT, EDIT_PATIENT, SET_PATIENTS } from './types';\nconst initialState = [];\nexport function patientsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_PATIENTS:\n      {\n        return [...action.payload];\n      }\n\n    case EDIT_PATIENT:\n      {\n        const editedPatients = state.map(el => el.id !== action.payload.id ? el : action.payload);\n        return [...editedPatients];\n      }\n\n    case ADD_PATIENT:\n      {\n        const id = getNewId(state);\n        return [{ ...action.payload,\n          id\n        }, ...state];\n      }\n\n    case DELETE_PATIENT:\n      {\n        const patients = state.filter(el => el.id !== action.id);\n        return [...patients];\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nfunction getNewId(patients) {\n  return patients.map(patient => patient.id).map(id => parseInt(id)).reduce((largest, id) => Math.max(largest, id + 1), -1).toString();\n}","map":{"version":3,"names":["ADD_PATIENT","DELETE_PATIENT","EDIT_PATIENT","SET_PATIENTS","initialState","patientsReducer","state","action","type","payload","editedPatients","map","el","id","getNewId","patients","filter","patient","parseInt","reduce","largest","Math","max","toString"],"sources":["E:/Work/PFE/Project folder/DocHelp-WA/src/redux/patients/reducer.ts"],"sourcesContent":["import { ADD_PATIENT, DELETE_PATIENT, EDIT_PATIENT, PatientsActions, SET_PATIENTS } from './types';\nimport { IPatient } from '../../interfaces/patient';\n\nconst initialState: IPatient[] = [];\n\nexport function patientsReducer(\n  state: IPatient[] = initialState,\n  action: PatientsActions\n): IPatient[] {\n  switch (action.type) {\n    case SET_PATIENTS: {\n      return [...action.payload];\n    }\n\n    case EDIT_PATIENT: {\n      const editedPatients = state.map((el) => (el.id !== action.payload.id ? el : action.payload));\n\n      return [...editedPatients];\n    }\n\n    case ADD_PATIENT: {\n      const id = getNewId(state);\n      return [{ ...action.payload, id }, ...state];\n    }\n\n    case DELETE_PATIENT: {\n      const patients = state.filter((el) => el.id !== action.id);\n      return [...patients];\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction getNewId(patients: IPatient[]) {\n  return patients\n    .map((patient) => patient.id)\n    .map((id) => parseInt(id))\n    .reduce((largest, id) => Math.max(largest, id + 1), -1)\n    .toString();\n}\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,EAAqEC,YAArE,QAAyF,SAAzF;AAGA,MAAMC,YAAwB,GAAG,EAAjC;AAEA,OAAO,SAASC,eAAT,GAGO;EAAA,IAFZC,KAEY,uEAFQF,YAER;EAAA,IADZG,MACY;;EACZ,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKL,YAAL;MAAmB;QACjB,OAAO,CAAC,GAAGI,MAAM,CAACE,OAAX,CAAP;MACD;;IAED,KAAKP,YAAL;MAAmB;QACjB,MAAMQ,cAAc,GAAGJ,KAAK,CAACK,GAAN,CAAWC,EAAD,IAASA,EAAE,CAACC,EAAH,KAAUN,MAAM,CAACE,OAAP,CAAeI,EAAzB,GAA8BD,EAA9B,GAAmCL,MAAM,CAACE,OAA7D,CAAvB;QAEA,OAAO,CAAC,GAAGC,cAAJ,CAAP;MACD;;IAED,KAAKV,WAAL;MAAkB;QAChB,MAAMa,EAAE,GAAGC,QAAQ,CAACR,KAAD,CAAnB;QACA,OAAO,CAAC,EAAE,GAAGC,MAAM,CAACE,OAAZ;UAAqBI;QAArB,CAAD,EAA4B,GAAGP,KAA/B,CAAP;MACD;;IAED,KAAKL,cAAL;MAAqB;QACnB,MAAMc,QAAQ,GAAGT,KAAK,CAACU,MAAN,CAAcJ,EAAD,IAAQA,EAAE,CAACC,EAAH,KAAUN,MAAM,CAACM,EAAtC,CAAjB;QACA,OAAO,CAAC,GAAGE,QAAJ,CAAP;MACD;;IAED;MAAS;QACP,OAAOT,KAAP;MACD;EAvBH;AAyBD;;AAED,SAASQ,QAAT,CAAkBC,QAAlB,EAAwC;EACtC,OAAOA,QAAQ,CACZJ,GADI,CACCM,OAAD,IAAaA,OAAO,CAACJ,EADrB,EAEJF,GAFI,CAECE,EAAD,IAAQK,QAAQ,CAACL,EAAD,CAFhB,EAGJM,MAHI,CAGG,CAACC,OAAD,EAAUP,EAAV,KAAiBQ,IAAI,CAACC,GAAL,CAASF,OAAT,EAAkBP,EAAE,GAAG,CAAvB,CAHpB,EAG+C,CAAC,CAHhD,EAIJU,QAJI,EAAP;AAKD"},"metadata":{},"sourceType":"module"}