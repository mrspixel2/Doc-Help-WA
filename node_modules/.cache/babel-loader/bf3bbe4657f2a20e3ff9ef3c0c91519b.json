{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\dashboards\\\\dashboard\\\\charts\\\\symptomsTreemap.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Treemap, Tooltip } from 'recharts';\n\nconst CustomTooltip = _ref => {\n  let {\n    active,\n    payload\n  } = _ref;\n\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"treemap-custom-tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }, `${payload[0].payload.root.name}`), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }\n    }, `${payload[0].payload.name} : ${payload[0].value}`));\n  }\n\n  return null;\n};\n\nconst SymptomsTreemap = () => {\n  const [data, setData] = useState([{\n    \"name\": \"axis\",\n    \"children\": [{\n      \"name\": \"Axis\",\n      \"size\": 24593\n    }, {\n      \"name\": \"Axes\",\n      \"size\": 1302\n    }, {\n      \"name\": \"AxisGridLine\",\n      \"size\": 652\n    }]\n  }]);\n\n  const fetchData = async () => {\n    const res = await fetch(\"http://localhost:5000/query/symptoms_count\");\n    const data = await res.json().then(data => {\n      setData([{\n        \"name\": \"axis\",\n        \"children\": data.map(d => {\n          return {\n            \"name\": d._id,\n            \"size\": d.count\n          };\n        })\n      }]);\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Treemap, {\n    width: 730,\n    height: 250,\n    data: data,\n    dataKey: \"size\",\n    ratio: 4 / 3,\n    stroke: \"#fff\",\n    fill: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    content: /*#__PURE__*/React.createElement(CustomTooltip, {\n      active: true,\n      payload: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 31\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default SymptomsTreemap;","map":{"version":3,"names":["React","useEffect","useState","Treemap","Tooltip","CustomTooltip","active","payload","length","root","name","value","SymptomsTreemap","data","setData","fetchData","res","fetch","json","then","map","d","_id","count"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/symptomsTreemap.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Treemap,\r\n    Tooltip\r\n} from 'recharts';\r\n\r\nconst CustomTooltip = ({ active, payload }) => {\r\n\r\n    if (active && payload && payload.length) {\r\n        return (\r\n            <div className=\"treemap-custom-tooltip\">\r\n                <p>{`${payload[0].payload.root.name}`}</p>\r\n                <p>{`${payload[0].payload.name} : ${payload[0].value}`}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n\r\nconst SymptomsTreemap = () => {\r\n\r\n\r\n    const [data, setData] = useState([{\r\n        \"name\": \"axis\",\r\n        \"children\": [\r\n            {\r\n                \"name\": \"Axis\",\r\n                \"size\": 24593\r\n            },\r\n            {\r\n                \"name\": \"Axes\",\r\n                \"size\": 1302\r\n            },\r\n            {\r\n                \"name\": \"AxisGridLine\",\r\n                \"size\": 652\r\n            },\r\n        ]\r\n    }])\r\n\r\n    const fetchData = async () => {\r\n        const res = await fetch(\"http://localhost:5000/query/symptoms_count\");\r\n        const data = await res.json()\r\n            .then(data => {\r\n                setData([{\r\n                    \"name\": \"axis\",\r\n                    \"children\": data.map((d) => {\r\n                        return {\r\n                            \"name\": d._id,\r\n                            \"size\": d.count\r\n                        }\r\n                    })\r\n                }])\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Treemap\r\n                width={730}\r\n                height={250}\r\n                data={data}\r\n                dataKey=\"size\"\r\n                ratio={4 / 3}\r\n                stroke=\"#fff\"\r\n                fill=\"#8884d8\"\r\n            />\r\n            <Tooltip content={<CustomTooltip active={true} payload={data} />}/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default SymptomsTreemap;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACIC,OADJ,EAEIC,OAFJ,QAGO,UAHP;;AAKA,MAAMC,aAAa,GAAG,QAAyB;EAAA,IAAxB;IAAEC,MAAF;IAAUC;EAAV,CAAwB;;EAE3C,IAAID,MAAM,IAAIC,OAAV,IAAqBA,OAAO,CAACC,MAAjC,EAAyC;IACrC,oBACI;MAAK,SAAS,EAAC,wBAAf;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAK,GAAED,OAAO,CAAC,CAAD,CAAP,CAAWA,OAAX,CAAmBE,IAAnB,CAAwBC,IAAK,EAApC,CADJ,eAEI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAK,GAAEH,OAAO,CAAC,CAAD,CAAP,CAAWA,OAAX,CAAmBG,IAAK,MAAKH,OAAO,CAAC,CAAD,CAAP,CAAWI,KAAM,EAArD,CAFJ,CADJ;EAMH;;EAED,OAAO,IAAP;AACH,CAZD;;AAeA,MAAMC,eAAe,GAAG,MAAM;EAG1B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAC;IAC9B,QAAQ,MADsB;IAE9B,YAAY,CACR;MACI,QAAQ,MADZ;MAEI,QAAQ;IAFZ,CADQ,EAKR;MACI,QAAQ,MADZ;MAEI,QAAQ;IAFZ,CALQ,EASR;MACI,QAAQ,cADZ;MAEI,QAAQ;IAFZ,CATQ;EAFkB,CAAD,CAAD,CAAhC;;EAkBA,MAAMa,SAAS,GAAG,YAAY;IAC1B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;IACA,MAAMJ,IAAI,GAAG,MAAMG,GAAG,CAACE,IAAJ,GACdC,IADc,CACTN,IAAI,IAAI;MACVC,OAAO,CAAC,CAAC;QACL,QAAQ,MADH;QAEL,YAAYD,IAAI,CAACO,GAAL,CAAUC,CAAD,IAAO;UACxB,OAAO;YACH,QAAQA,CAAC,CAACC,GADP;YAEH,QAAQD,CAAC,CAACE;UAFP,CAAP;QAIH,CALW;MAFP,CAAD,CAAD,CAAP;IASH,CAXc,CAAnB;EAYH,CAdD;;EAgBAtB,SAAS,CAAC,MAAM;IACZc,SAAS;EACZ,CAFQ,EAEN,EAFM,CAAT;EAIA,oBACI,uDACI,oBAAC,OAAD;IACI,KAAK,EAAE,GADX;IAEI,MAAM,EAAE,GAFZ;IAGI,IAAI,EAAEF,IAHV;IAII,OAAO,EAAC,MAJZ;IAKI,KAAK,EAAE,IAAI,CALf;IAMI,MAAM,EAAC,MANX;IAOI,IAAI,EAAC,SAPT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,eAUI,oBAAC,OAAD;IAAS,OAAO,eAAE,oBAAC,aAAD;MAAe,MAAM,EAAE,IAAvB;MAA6B,OAAO,EAAEA,IAAtC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAVJ,CADJ;AAeH,CAxDD;;AA0DA,eAAeD,eAAf"},"metadata":{},"sourceType":"module"}