{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/tag/style\";\nimport _Tag from \"antd/es/tag\";\nvar _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\dashboards\\\\classifications\\\\ClassificationsTable.tsx\";\nimport Modal from 'antd/lib/modal/Modal';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\n\nconst ClassificationTable = props => {\n  const [state, setstate] = useState([]);\n  const [loading, setloading] = useState(true);\n  const [modaldata, setmodaldata] = useState([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const showModal = record => {\n    console.log(record);\n    setmodaldata(record);\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const valueSwitch = (param1, param2) => {\n    switch (param1) {\n      case 'Kidney':\n        switch (param2) {\n          case 0:\n            return 'Diagnosed with Cyst';\n\n          case 1:\n            return 'Normal';\n\n          case 2:\n            return 'Diagnosed with Stone';\n\n          case 3:\n            return 'Diagnosed with Tumor';\n        }\n\n      default:\n        switch (param2) {\n          case 0:\n            return 'Normal';\n\n          case 1:\n            return param1;\n        }\n\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = async () => {\n    await Axios.post('http://localhost:5000/predict/getAll_predictions').then(res => {\n      console.log(res.data);\n      setloading(false);\n      setstate(res.data.map(row => ({\n        key: row._id,\n        patient: row.patient,\n        desease: row.desease,\n        image_path: row.image_path,\n        symptoms: row.symptoms,\n        d_report: row.d_report,\n        result: row.result,\n        probs: row.probs,\n        status: row.prediction_status\n      })));\n    });\n  };\n\n  const columns = [{\n    title: 'Patient Name',\n    dataIndex: 'patient',\n    key: 'patient',\n    render: text => /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 23\n      }\n    }, text)\n  }, {\n    title: 'Desease',\n    dataIndex: 'desease',\n    key: 'desease',\n    responsive: ['md']\n  }, {\n    title: 'Result',\n    dataIndex: 'result',\n    key: 'result',\n    responsive: ['sm'],\n    render: result => result == 0 ? \"Normal\" : \"Diagnosed\"\n  }, {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n    responsive: ['sm'],\n    render: status => /*#__PURE__*/React.createElement(_Tag, {\n      style: {\n        borderRadius: 15\n      },\n      color: status === 'success' ? '#b7ce63' : '#cec759',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, status)\n  }];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_Table, {\n    columns: columns,\n    dataSource: state,\n    onRow: record => ({\n      onClick: () => {\n        showModal(record);\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    title: \"Diagnostic Informations\",\n    visible: isModalVisible,\n    onOk: handleOk,\n    onCancel: handleCancel,\n    width: 1000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"Patient: \", modaldata['patient']), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"Desease : \", modaldata['desease']), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Result : \", valueSwitch(modaldata['desease'], modaldata['result'])), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, \"Probabilities : \", modaldata['probs']), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, \"Doctors report : \", modaldata['d_report']), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Symptoms :\", modaldata['symptoms[]'].map(symptom => /*#__PURE__*/React.createElement(_Tag, {\n    style: {\n      borderRadius: 15\n    },\n    color: \"#b7ce63\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, symptom)), console.log(typeof modaldata['symptoms'])), /*#__PURE__*/React.createElement(\"img\", {\n    width: \"400\",\n    src: modaldata['image_path'],\n    height: \"400\",\n    alt: \"avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 10\n    }\n  })));\n};\n\nexport default ClassificationTable;","map":{"version":3,"names":["Modal","Axios","React","useEffect","useState","ClassificationTable","props","state","setstate","loading","setloading","modaldata","setmodaldata","isModalVisible","setIsModalVisible","showModal","record","console","log","handleOk","handleCancel","valueSwitch","param1","param2","getData","post","then","res","data","map","row","key","_id","patient","desease","image_path","symptoms","d_report","result","probs","status","prediction_status","columns","title","dataIndex","render","text","responsive","borderRadius","onClick","symptom"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/classifications/ClassificationsTable.tsx"],"sourcesContent":["import { Table, Tag } from 'antd';\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\nconst ClassificationTable = (props: any) => {\r\n  const [state, setstate] = useState([]);\r\n  const [loading, setloading] = useState(true);\r\n  const [modaldata, setmodaldata] = useState([]);\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const showModal = (record) => {\r\n    console.log(record);\r\n    setmodaldata(record);\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const valueSwitch = (param1,param2) => {\r\n    switch(param1) {\r\n      case 'Kidney':\r\n        switch(param2) {\r\n          case 0 : return 'Diagnosed with Cyst';\r\n          case 1 : return 'Normal';\r\n          case 2 : return 'Diagnosed with Stone';\r\n          case 3 : return 'Diagnosed with Tumor';\r\n        }\r\n      default:\r\n        switch(param2) {\r\n          case 0 : return 'Normal';\r\n          case 1 : return param1;\r\n        }\r\n        \r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    await Axios.post('http://localhost:5000/predict/getAll_predictions').then(\r\n      res => {\r\n        console.log(res.data);\r\n        setloading(false);\r\n        setstate(\r\n          res.data.map(row => ({\r\n            key: row._id,\r\n            patient: row.patient,\r\n            desease: row.desease,\r\n            image_path: row.image_path,\r\n            symptoms: row.symptoms,\r\n            d_report: row.d_report,\r\n            result: row.result,\r\n            probs: row.probs,\r\n            status: row.prediction_status\r\n\r\n          }))\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  const columns: ColumnsType = [\r\n    {\r\n      title: 'Patient Name',\r\n      dataIndex: 'patient',\r\n      key: 'patient',\r\n      render: text => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: 'Desease',\r\n      dataIndex: 'desease',\r\n      key: 'desease',\r\n      responsive: ['md'],\r\n    },\r\n    {\r\n      title: 'Result',\r\n      dataIndex: 'result',\r\n      key: 'result',\r\n      responsive: ['sm'],\r\n      render: (result) => (\r\n        result == 0 ? \"Normal\" : \"Diagnosed\"\r\n      )\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      responsive: ['sm'],\r\n      render: (status) => (\r\n        <Tag style={{ borderRadius: 15 }} color={status === 'success' ? '#b7ce63' : '#cec759'}>\r\n          {status}\r\n        </Tag>\r\n      )\r\n    },\r\n  ];\r\n\r\n\r\n  return (\r\n    <>\r\n      <Table columns={columns}\r\n        dataSource={state}\r\n        onRow={(record) => ({\r\n          onClick: () => { showModal(record) }\r\n        })} />\r\n      <Modal title=\"Diagnostic Informations\"\r\n        visible={isModalVisible}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        width={1000}>\r\n        \r\n        <p>Patient: {modaldata['patient']}</p>\r\n        <p>Desease : {modaldata['desease']}</p>\r\n        <p>Result : {valueSwitch(modaldata['desease'],modaldata['result'])}</p>\r\n        <p>Probabilities : {modaldata['probs']}</p>\r\n        <p>Doctors report : {modaldata['d_report']}</p>\r\n        <p>Symptoms :  \r\n           {modaldata['symptoms[]'].map((symptom) => (\r\n            <Tag style={{ borderRadius: 15 }} color=\"#b7ce63\">\r\n              {symptom}\r\n            </Tag>\r\n          ))}\r\n           {console.log(typeof(modaldata['symptoms']))}\r\n         </p>\r\n         <img width='400' src={modaldata['image_path'] as string } height='400' alt='avatar' />\r\n\r\n      </Modal>\r\n\r\n\r\n\r\n    </>)\r\n\r\n}\r\n\r\nexport default ClassificationTable;"],"mappings":";;;;;AAEA,OAAOA,KAAP,MAAkB,sBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAKA,MAAMC,mBAAmB,GAAIC,KAAD,IAAgB;EAC1C,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;EAEA,MAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;;EAEA,MAAMW,SAAS,GAAIC,MAAD,IAAY;IAC5BC,OAAO,CAACC,GAAR,CAAYF,MAAZ;IACAJ,YAAY,CAACI,MAAD,CAAZ;IACAF,iBAAiB,CAAC,IAAD,CAAjB;EACD,CAJD;;EAMA,MAAMK,QAAQ,GAAG,MAAM;IACrBL,iBAAiB,CAAC,KAAD,CAAjB;EACD,CAFD;;EAIA,MAAMM,YAAY,GAAG,MAAM;IACzBN,iBAAiB,CAAC,KAAD,CAAjB;EACD,CAFD;;EAIA,MAAMO,WAAW,GAAG,CAACC,MAAD,EAAQC,MAAR,KAAmB;IACrC,QAAOD,MAAP;MACE,KAAK,QAAL;QACE,QAAOC,MAAP;UACE,KAAK,CAAL;YAAS,OAAO,qBAAP;;UACT,KAAK,CAAL;YAAS,OAAO,QAAP;;UACT,KAAK,CAAL;YAAS,OAAO,sBAAP;;UACT,KAAK,CAAL;YAAS,OAAO,sBAAP;QAJX;;MAMF;QACE,QAAOA,MAAP;UACE,KAAK,CAAL;YAAS,OAAO,QAAP;;UACT,KAAK,CAAL;YAAS,OAAOD,MAAP;QAFX;;IATJ;EAeD,CAhBD;;EAmBAnB,SAAS,CAAC,MAAM;IACdqB,OAAO;EACR,CAFQ,EAEN,EAFM,CAAT;;EAIA,MAAMA,OAAO,GAAG,YAAY;IAC1B,MAAMvB,KAAK,CAACwB,IAAN,CAAW,kDAAX,EAA+DC,IAA/D,CACJC,GAAG,IAAI;MACLV,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACC,IAAhB;MACAlB,UAAU,CAAC,KAAD,CAAV;MACAF,QAAQ,CACNmB,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAaC,GAAG,KAAK;QACnBC,GAAG,EAAED,GAAG,CAACE,GADU;QAEnBC,OAAO,EAAEH,GAAG,CAACG,OAFM;QAGnBC,OAAO,EAAEJ,GAAG,CAACI,OAHM;QAInBC,UAAU,EAAEL,GAAG,CAACK,UAJG;QAKnBC,QAAQ,EAAEN,GAAG,CAACM,QALK;QAMnBC,QAAQ,EAAEP,GAAG,CAACO,QANK;QAOnBC,MAAM,EAAER,GAAG,CAACQ,MAPO;QAQnBC,KAAK,EAAET,GAAG,CAACS,KARQ;QASnBC,MAAM,EAAEV,GAAG,CAACW;MATO,CAAL,CAAhB,CADM,CAAR;IAcD,CAlBG,CAAN;EAoBD,CArBD;;EAuBA,MAAMC,OAAoB,GAAG,CAC3B;IACEC,KAAK,EAAE,cADT;IAEEC,SAAS,EAAE,SAFb;IAGEb,GAAG,EAAE,SAHP;IAIEc,MAAM,EAAEC,IAAI,iBAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAIA,IAAJ;EAJlB,CAD2B,EAO3B;IACEH,KAAK,EAAE,SADT;IAEEC,SAAS,EAAE,SAFb;IAGEb,GAAG,EAAE,SAHP;IAIEgB,UAAU,EAAE,CAAC,IAAD;EAJd,CAP2B,EAa3B;IACEJ,KAAK,EAAE,QADT;IAEEC,SAAS,EAAE,QAFb;IAGEb,GAAG,EAAE,QAHP;IAIEgB,UAAU,EAAE,CAAC,IAAD,CAJd;IAKEF,MAAM,EAAGP,MAAD,IACNA,MAAM,IAAI,CAAV,GAAc,QAAd,GAAyB;EAN7B,CAb2B,EAsB3B;IACEK,KAAK,EAAE,QADT;IAEEC,SAAS,EAAE,QAFb;IAGEb,GAAG,EAAE,QAHP;IAIEgB,UAAU,EAAE,CAAC,IAAD,CAJd;IAKEF,MAAM,EAAGL,MAAD,iBACN;MAAK,KAAK,EAAE;QAAEQ,YAAY,EAAE;MAAhB,CAAZ;MAAkC,KAAK,EAAER,MAAM,KAAK,SAAX,GAAuB,SAAvB,GAAmC,SAA5E;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGA,MADH;EANJ,CAtB2B,CAA7B;EAoCA,oBACE,uDACE;IAAO,OAAO,EAAEE,OAAhB;IACE,UAAU,EAAEnC,KADd;IAEE,KAAK,EAAGS,MAAD,KAAa;MAClBiC,OAAO,EAAE,MAAM;QAAElC,SAAS,CAACC,MAAD,CAAT;MAAmB;IADlB,CAAb,CAFT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,eAME,oBAAC,KAAD;IAAO,KAAK,EAAC,yBAAb;IACE,OAAO,EAAEH,cADX;IAEE,IAAI,EAAEM,QAFR;IAGE,QAAQ,EAAEC,YAHZ;IAIE,KAAK,EAAE,IAJT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAME;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAaT,SAAS,CAAC,SAAD,CAAtB,CANF,eAOE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iBAAcA,SAAS,CAAC,SAAD,CAAvB,CAPF,eAQE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAAaU,WAAW,CAACV,SAAS,CAAC,SAAD,CAAV,EAAsBA,SAAS,CAAC,QAAD,CAA/B,CAAxB,CARF,eASE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uBAAoBA,SAAS,CAAC,OAAD,CAA7B,CATF,eAUE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBAAqBA,SAAS,CAAC,UAAD,CAA9B,CAVF,eAWE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iBACIA,SAAS,CAAC,YAAD,CAAT,CAAwBkB,GAAxB,CAA6BqB,OAAD,iBAC5B;IAAK,KAAK,EAAE;MAAEF,YAAY,EAAE;IAAhB,CAAZ;IAAkC,KAAK,EAAC,SAAxC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGE,OADH,CADA,CADJ,EAMIjC,OAAO,CAACC,GAAR,CAAY,OAAOP,SAAS,CAAC,UAAD,CAA5B,CANJ,CAXF,eAmBG;IAAK,KAAK,EAAC,KAAX;IAAiB,GAAG,EAAEA,SAAS,CAAC,YAAD,CAA/B;IAA0D,MAAM,EAAC,KAAjE;IAAuE,GAAG,EAAC,QAA3E;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAnBH,CANF,CADF;AAkCD,CAzID;;AA2IA,eAAeN,mBAAf"},"metadata":{},"sourceType":"module"}