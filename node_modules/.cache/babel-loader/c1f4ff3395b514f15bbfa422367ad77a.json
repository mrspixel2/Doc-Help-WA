{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\PFE\\\\Project folder\\\\DocHelp\\\\src\\\\pages\\\\dashboards\\\\dashboard\\\\charts\\\\predictions-month-linechart.tsx\";\nimport React from \"react\";\nimport { LineChart, XAxis, YAxis, CartesianGrid, Line, Tooltip, Legend } from 'recharts';\n\nconst PredictionsMonthLinechart = () => {\n  const [data, setData] = [{\n    \"month\": \"Jan\",\n    \"predictions\": 5\n  }, {\n    \"month\": \"Feb\",\n    \"predictions\": 10\n  }, {\n    \"month\": \"Mar\",\n    \"predictions\": 15\n  }, {\n    \"month\": \"Apr\",\n    \"predictions\": 20\n  }, {\n    \"month\": \"May\",\n    \"predictions\": 25\n  }, {\n    \"month\": \"Jun\",\n    \"predictions\": 30\n  }, {\n    \"month\": \"Jul\",\n    \"predictions\": 35\n  }, {\n    \"month\": \"Aug\",\n    \"predictions\": 40\n  }, {\n    \"month\": \"Sep\",\n    \"predictions\": 45\n  }, {\n    \"month\": \"Oct\",\n    \"predictions\": 50\n  }, {\n    \"month\": \"Nov\",\n    \"predictions\": 55\n  }, {\n    \"month\": \"Dec\",\n    \"predictions\": 60\n  }];\n  /*const fetchData = async () => {\r\n      const res = await fetch(\"http://localhost:5000/query/predictions_per_month\");\r\n      const data = await res.json()\r\n          .then(data => {\r\n              setCounts(data.slice(1).map((d) => d));\r\n          });\r\n      console.log(counts);\r\n      return data;\r\n  }\r\n    useEffect(() => {\r\n        fetchData();\r\n  }, []);\r\n  */\n\n  return /*#__PURE__*/React.createElement(LineChart, {\n    width: 1100,\n    height: 400,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"pv\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"uv\",\n    stroke: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default PredictionsMonthLinechart;","map":{"version":3,"names":["React","LineChart","XAxis","YAxis","CartesianGrid","Line","Tooltip","Legend","PredictionsMonthLinechart","data","setData","top","right","left","bottom"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/predictions-month-linechart.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    LineChart,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Line,\r\n    Tooltip,\r\n    Legend\r\n} from 'recharts';\r\n\r\nconst PredictionsMonthLinechart = () => {\r\n    const [data,setData] = [\r\n        {\r\n            \"month\": \"Jan\",\r\n            \"predictions\": 5\r\n        },\r\n        {\r\n            \"month\": \"Feb\",\r\n            \"predictions\": 10\r\n        },\r\n        {\r\n            \"month\": \"Mar\",\r\n            \"predictions\": 15\r\n        },\r\n        {\r\n            \"month\": \"Apr\",\r\n            \"predictions\": 20\r\n        },\r\n        {\r\n            \"month\": \"May\",\r\n            \"predictions\": 25\r\n        },\r\n        {\r\n            \"month\": \"Jun\",\r\n            \"predictions\": 30\r\n        },\r\n        {\r\n            \"month\": \"Jul\",\r\n            \"predictions\": 35\r\n        },\r\n        {\r\n            \"month\": \"Aug\",\r\n            \"predictions\": 40\r\n        },\r\n        {\r\n            \"month\": \"Sep\",\r\n            \"predictions\": 45\r\n        },\r\n        {\r\n            \"month\": \"Oct\",\r\n            \"predictions\": 50\r\n        },\r\n        {\r\n\r\n            \"month\": \"Nov\",\r\n            \"predictions\": 55\r\n        },\r\n        {\r\n            \"month\": \"Dec\",\r\n            \"predictions\": 60\r\n        }\r\n    ]\r\n\r\n    /*const fetchData = async () => {\r\n        const res = await fetch(\"http://localhost:5000/query/predictions_per_month\");\r\n        const data = await res.json()\r\n            .then(data => {\r\n                setCounts(data.slice(1).map((d) => d));\r\n            });\r\n        console.log(counts);\r\n        return data;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetchData();\r\n    }, []);\r\n*/\r\n\r\n    return (\r\n        <LineChart width={1100} height={400} data={data}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" />\r\n            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n        </LineChart>\r\n    )\r\n}\r\n\r\nexport default PredictionsMonthLinechart;"],"mappings":";AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SACIC,SADJ,EAEIC,KAFJ,EAGIC,KAHJ,EAIIC,aAJJ,EAKIC,IALJ,EAMIC,OANJ,EAOIC,MAPJ,QAQO,UARP;;AAUA,MAAMC,yBAAyB,GAAG,MAAM;EACpC,MAAM,CAACC,IAAD,EAAMC,OAAN,IAAiB,CACnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CADmB,EAKnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CALmB,EASnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CATmB,EAanB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CAbmB,EAiBnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CAjBmB,EAqBnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CArBmB,EAyBnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CAzBmB,EA6BnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CA7BmB,EAiCnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CAjCmB,EAqCnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CArCmB,EAyCnB;IAEI,SAAS,KAFb;IAGI,eAAe;EAHnB,CAzCmB,EA8CnB;IACI,SAAS,KADb;IAEI,eAAe;EAFnB,CA9CmB,CAAvB;EAoDA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAII,oBACI,oBAAC,SAAD;IAAW,KAAK,EAAE,IAAlB;IAAwB,MAAM,EAAE,GAAhC;IAAqC,IAAI,EAAED,IAA3C;IACI,MAAM,EAAE;MAAEE,GAAG,EAAE,CAAP;MAAUC,KAAK,EAAE,EAAjB;MAAqBC,IAAI,EAAE,EAA3B;MAA+BC,MAAM,EAAE;IAAvC,CADZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEI,oBAAC,aAAD;IAAe,eAAe,EAAC,KAA/B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFJ,eAGI,oBAAC,KAAD;IAAO,OAAO,EAAC,MAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAHJ,eAII,oBAAC,KAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAJJ,eAKI,oBAAC,OAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EALJ,eAMI,oBAAC,MAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EANJ,eAOI,oBAAC,IAAD;IAAM,IAAI,EAAC,UAAX;IAAsB,OAAO,EAAC,IAA9B;IAAmC,MAAM,EAAC,SAA1C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAPJ,eAQI,oBAAC,IAAD;IAAM,IAAI,EAAC,UAAX;IAAsB,OAAO,EAAC,IAA9B;IAAmC,MAAM,EAAC,SAA1C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EARJ,CADJ;AAYH,CAjFD;;AAmFA,eAAeN,yBAAf"},"metadata":{},"sourceType":"module"}