{"ast":null,"code":"import { useEffect, useState } from \"react\";\n\nconst gettingData = () => {\n  const [counts, setCounts] = useState([]);\n\n  const fetchData = async () => {\n    const res = await fetch(\"http://localhost:5000/query/approval_count_per_desease\");\n    const data = await res.json().then(data => {\n      setCounts(data.map(d => {\n        return {\n          name: d._id,\n          approved: d.approved,\n          rejected: d.unapproved,\n          total: d.approved + d.unapproved\n        };\n      }));\n    });\n    console.log(data);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return {\n    color: ['#ed5564', '#336cfb'],\n    tooltip: {\n      trigger: 'none',\n      axisPointer: {\n        type: 'cross'\n      }\n    },\n    legend: {\n      data: ['patients 2018', 'patients 2019']\n    },\n    grid: {\n      left: 30,\n      right: 0,\n      top: 50,\n      bottom: 50\n    },\n    xAxis: [{\n      type: 'category',\n      axisTick: {\n        alignWithLabel: true\n      },\n      axisLine: {\n        onZero: false,\n        lineStyle: {\n          color: '#336cfb'\n        }\n      },\n      axisPointer: {\n        label: {\n          formatter: function (params) {\n            return 'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n          }\n        }\n      },\n      data: ['2019-1', '2019-2', '2019-3', '2019-4', '2019-5', '2019-6', '2019-7', '2019-8', '2019-9', '2019-10', '2019-11', '2019-12']\n    }, {\n      type: 'category',\n      axisTick: {\n        alignWithLabel: true\n      },\n      axisLine: {\n        onZero: false,\n        lineStyle: {\n          color: '#ed5564'\n        }\n      },\n      axisPointer: {\n        label: {\n          formatter: function (params) {\n            return 'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n          }\n        }\n      },\n      data: ['2018-1', '2018-2', '2018-3', '2018-4', '2018-5', '2018-6', '2018-7', '2018-8', '2018-9', '2018-10', '2018-11', '2018-12']\n    }],\n    yAxis: [{\n      type: 'value'\n    }],\n    series: [{\n      name: 'patients 2018',\n      type: 'line',\n      xAxisIndex: 1,\n      smooth: true,\n      data: [159, 149, 174, 182, 219, 201, 175, 182, 119, 118, 112, 96]\n    }, {\n      name: 'patients 2019',\n      type: 'line',\n      smooth: true,\n      data: [95, 124, 132, 143, 138, 178, 194, 211, 234, 257, 241, 226]\n    }]\n  };\n};\n\nexport default gettingData;","map":{"version":3,"names":["useEffect","useState","gettingData","counts","setCounts","fetchData","res","fetch","data","json","then","map","d","name","_id","approved","rejected","unapproved","total","console","log","color","tooltip","trigger","axisPointer","type","legend","grid","left","right","top","bottom","xAxis","axisTick","alignWithLabel","axisLine","onZero","lineStyle","label","formatter","params","value","seriesData","length","yAxis","series","xAxisIndex","smooth"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/predictions-month-linechart.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst gettingData = () => {\r\n\r\n    const [counts, setCounts] = useState([]);\r\n\r\n    const fetchData = async () => {\r\n\r\n        const res = await fetch(\"http://localhost:5000/query/approval_count_per_desease\");\r\n        const data = await res.json()\r\n            .then(data => {\r\n                setCounts(data.map((d) => {\r\n                    return {\r\n                        name: d._id,\r\n                        approved: d.approved,\r\n                        rejected: d.unapproved,\r\n                        total: d.approved + d.unapproved\r\n                    }\r\n                }))\r\n            });\r\n        console.log(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n    {\r\n        color: ['#ed5564', '#336cfb'],\r\n        tooltip: {\r\n            trigger: 'none',\r\n            axisPointer: {\r\n                type: 'cross'\r\n            }\r\n        },\r\n        legend: {\r\n            data: ['patients 2018', 'patients 2019']\r\n        },\r\n        grid: {\r\n            left: 30,\r\n            right: 0,\r\n            top: 50,\r\n            bottom: 50\r\n        },\r\n        xAxis: [\r\n            {\r\n                type: 'category',\r\n                axisTick: {\r\n                    alignWithLabel: true\r\n                },\r\n                axisLine: {\r\n                    onZero: false,\r\n                    lineStyle: {\r\n                        color: '#336cfb'\r\n                    }\r\n                },\r\n                axisPointer: {\r\n                    label: {\r\n                        formatter: function (params) {\r\n                            return (\r\n                                'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '')\r\n                            );\r\n                        }\r\n                    }\r\n                },\r\n                data: [\r\n                    '2019-1',\r\n                    '2019-2',\r\n                    '2019-3',\r\n                    '2019-4',\r\n                    '2019-5',\r\n                    '2019-6',\r\n                    '2019-7',\r\n                    '2019-8',\r\n                    '2019-9',\r\n                    '2019-10',\r\n                    '2019-11',\r\n                    '2019-12'\r\n                ]\r\n            },\r\n            {\r\n                type: 'category',\r\n                axisTick: {\r\n                    alignWithLabel: true\r\n                },\r\n                axisLine: {\r\n                    onZero: false,\r\n                    lineStyle: {\r\n                        color: '#ed5564'\r\n                    }\r\n                },\r\n                axisPointer: {\r\n                    label: {\r\n                        formatter: function (params) {\r\n                            return (\r\n                                'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '')\r\n                            );\r\n                        }\r\n                    }\r\n                },\r\n                data: [\r\n                    '2018-1',\r\n                    '2018-2',\r\n                    '2018-3',\r\n                    '2018-4',\r\n                    '2018-5',\r\n                    '2018-6',\r\n                    '2018-7',\r\n                    '2018-8',\r\n                    '2018-9',\r\n                    '2018-10',\r\n                    '2018-11',\r\n                    '2018-12'\r\n                ]\r\n            }\r\n        ],\r\n        yAxis: [\r\n            {\r\n                type: 'value'\r\n            }\r\n        ],\r\n        series: [\r\n            {\r\n                name: 'patients 2018',\r\n                type: 'line',\r\n                xAxisIndex: 1,\r\n                smooth: true,\r\n                data: [159, 149, 174, 182, 219, 201, 175, 182, 119, 118, 112, 96]\r\n            },\r\n            {\r\n                name: 'patients 2019',\r\n                type: 'line',\r\n                smooth: true,\r\n                data: [95, 124, 132, 143, 138, 178, 194, 211, 234, 257, 241, 226]\r\n            }\r\n        ]\r\n    })\r\n}\r\n\r\nexport default gettingData;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}