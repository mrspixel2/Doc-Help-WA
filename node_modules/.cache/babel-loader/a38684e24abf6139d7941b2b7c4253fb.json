{"ast":null,"code":"'use strict';\n\nvar Mexp = require('./math_function.js');\n\nfunction inc(arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] += val;\n  }\n\n  return arr;\n}\n\nvar token = ['sin', 'cos', 'tan', 'pi', '(', ')', 'P', 'C', ' ', 'asin', 'acos', 'atan', '7', '8', '9', 'int', 'cosh', 'acosh', 'ln', '^', 'root', '4', '5', '6', '/', '!', 'tanh', 'atanh', 'Mod', '1', '2', '3', '*', 'sinh', 'asinh', 'e', 'log', '0', '.', '+', '-', ',', 'Sigma', 'n', 'Pi', 'pow', '&'];\nvar show = ['sin', 'cos', 'tan', '&pi;', '(', ')', 'P', 'C', ' ', 'asin', 'acos', 'atan', '7', '8', '9', 'Int', 'cosh', 'acosh', ' ln', '^', 'root', '4', '5', '6', '&divide;', '!', 'tanh', 'atanh', ' Mod ', '1', '2', '3', '&times;', 'sinh', 'asinh', 'e', ' log', '0', '.', '+', '-', ',', '&Sigma;', 'n', '&Pi;', 'pow', '&'];\nvar eva = [Mexp.math.sin, Mexp.math.cos, Mexp.math.tan, 'PI', '(', ')', Mexp.math.P, Mexp.math.C, ' '.anchor, Mexp.math.asin, Mexp.math.acos, Mexp.math.atan, '7', '8', '9', Math.floor, Mexp.math.cosh, Mexp.math.acosh, Math.log, Math.pow, Math.sqrt, '4', '5', '6', Mexp.math.div, Mexp.math.fact, Mexp.math.tanh, Mexp.math.atanh, Mexp.math.mod, '1', '2', '3', Mexp.math.mul, Mexp.math.sinh, Mexp.math.asinh, 'E', Mexp.math.log, '0', '.', Mexp.math.add, Mexp.math.sub, ',', Mexp.math.sigma, 'n', Mexp.math.Pi, Math.pow, Mexp.math.and];\nvar preced = {\n  0: 11,\n  1: 0,\n  2: 3,\n  3: 0,\n  4: 0,\n  5: 0,\n  6: 0,\n  7: 11,\n  8: 11,\n  9: 1,\n  10: 10,\n  11: 0,\n  12: 11,\n  13: 0,\n  14: -1 // will be filtered after lexer\n\n}; // stores precedence by types\n\nvar type = [0, 0, 0, 3, 4, 5, 10, 10, 14, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 10, 0, 1, 1, 1, 2, 7, 0, 0, 2, 1, 1, 1, 2, 0, 0, 3, 0, 1, 6, 9, 9, 11, 12, 13, 12, 8, 9];\n/*\r\n0 : function with syntax function_name(Maths_exp)\r\n1 : numbers\r\n2 : binary operators like * / Mod left associate and same precedence\r\n3 : Math constant values like e,pi,Cruncher ans\r\n4 : opening bracket\r\n5 : closing bracket\r\n6 : decimal\r\n7 : function with syntax (Math_exp)function_name\r\n8: function with syntax function_name(Math_exp1,Math_exp2)\r\n9 : binary operator like +,-\r\n10: binary operator like P C or ^\r\n11: ,\r\n12: function with , seperated three parameters and third parameter is a string that will be mexp string\r\n13: variable of Sigma function\r\n*/\n\nvar type0 = {\n  0: true,\n  1: true,\n  3: true,\n  4: true,\n  6: true,\n  8: true,\n  9: true,\n  12: true,\n  13: true,\n  14: true\n}; // type2:true,type4:true,type9:true,type11:true,type21:true,type22\n\nvar type1 = {\n  0: true,\n  1: true,\n  2: true,\n  3: true,\n  4: true,\n  5: true,\n  6: true,\n  7: true,\n  8: true,\n  9: true,\n  10: true,\n  11: true,\n  12: true,\n  13: true\n}; // type3:true,type5:true,type7:true,type23\n\nvar type1Asterick = {\n  0: true,\n  3: true,\n  4: true,\n  8: true,\n  12: true,\n  13: true\n};\nvar empty = {};\nvar type3Asterick = {\n  0: true,\n  1: true,\n  3: true,\n  4: true,\n  6: true,\n  8: true,\n  12: true,\n  13: true\n}; // type_5:true,type_7:true,type_23\n\nvar type6 = {\n  1: true\n};\nvar newAr = [[], ['1', '2', '3', '7', '8', '9', '4', '5', '6', '+', '-', '*', '/', '(', ')', '^', '!', 'P', 'C', 'e', '0', '.', ',', 'n', ' ', '&'], ['pi', 'ln', 'Pi'], ['sin', 'cos', 'tan', 'Del', 'int', 'Mod', 'log', 'pow'], ['asin', 'acos', 'atan', 'cosh', 'root', 'tanh', 'sinh'], ['acosh', 'atanh', 'asinh', 'Sigma']];\n\nfunction match(str1, str2, i, x) {\n  for (var f = 0; f < x; f++) {\n    if (str1[i + f] !== str2[f]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nMexp.addToken = function (tokens) {\n  for (var i = 0; i < tokens.length; i++) {\n    var x = tokens[i].token.length;\n    var temp = -1; // newAr is a specially designed data structure index of 1d array = length of tokens\n\n    newAr[x] = newAr[x] || [];\n\n    for (var y = 0; y < newAr[x].length; y++) {\n      if (tokens[i].token === newAr[x][y]) {\n        temp = token.indexOf(newAr[x][y]);\n        break;\n      }\n    }\n\n    if (temp === -1) {\n      token.push(tokens[i].token);\n      type.push(tokens[i].type);\n\n      if (newAr.length <= tokens[i].token.length) {\n        newAr[tokens[i].token.length] = [];\n      }\n\n      newAr[tokens[i].token.length].push(tokens[i].token);\n      eva.push(tokens[i].value);\n      show.push(tokens[i].show);\n    } else {\n      // overwrite\n      token[temp] = tokens[i].token;\n      type[temp] = tokens[i].type;\n      eva[temp] = tokens[i].value;\n      show[temp] = tokens[i].show;\n    }\n  }\n};\n\nfunction tokenize(string) {\n  var nodes = [];\n  var length = string.length;\n  var key, x, y;\n\n  for (var i = 0; i < length; i++) {\n    if (i < length - 1 && string[i] === ' ' && string[i + 1] === ' ') {\n      continue;\n    }\n\n    key = '';\n\n    for (x = string.length - i > newAr.length - 2 ? newAr.length - 1 : string.length - i; x > 0; x--) {\n      if (newAr[x] === undefined) continue;\n\n      for (y = 0; y < newAr[x].length; y++) {\n        if (match(string, newAr[x][y], i, x)) {\n          key = newAr[x][y];\n          y = newAr[x].length;\n          x = 0;\n        }\n      }\n    }\n\n    i += key.length - 1;\n\n    if (key === '') {\n      throw new Mexp.Exception(\"Can't understand after \" + string.slice(i));\n    }\n\n    var index = token.indexOf(key);\n    nodes.push({\n      index: index,\n      token: key,\n      type: type[index],\n      eval: eva[index],\n      precedence: preced[type[index]],\n      show: show[index]\n    });\n  }\n\n  return nodes;\n}\n\nMexp.lex = function (inp, tokens) {\n  'use strict';\n\n  var changeSignObj = {\n    value: Mexp.math.changeSign,\n    type: 0,\n    pre: 21,\n    show: '-'\n  };\n  var closingParObj = {\n    value: ')',\n    show: ')',\n    type: 5,\n    pre: 0\n  };\n  var openingParObj = {\n    value: '(',\n    type: 4,\n    pre: 0,\n    show: '('\n  };\n  var str = [openingParObj];\n  var ptc = []; // Parenthesis to close at the beginning is after one token\n\n  var inpStr = inp;\n  var allowed = type0;\n  var bracToClose = 0;\n  var asterick = empty;\n  var prevKey = '';\n  var i;\n\n  if (typeof tokens !== 'undefined') {\n    Mexp.addToken(tokens);\n  }\n\n  var obj = {};\n  var nodes = tokenize(inpStr);\n\n  for (i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n\n    if (node.type === 14) {\n      if (i > 0 && i < nodes.length - 1 && nodes[i + 1].type === 1 && (nodes[i - 1].type === 1 || nodes[i - 1].type === 6)) {\n        throw new Mexp.Exception('Unexpected Space');\n      }\n\n      continue;\n    }\n\n    var cToken = node.token;\n    var cType = node.type;\n    var cEv = node.eval;\n    var cPre = node.precedence;\n    var cShow = node.show;\n    var pre = str[str.length - 1];\n    var j;\n\n    for (j = ptc.length; j--;) {\n      // loop over ptc\n      if (ptc[j] === 0) {\n        if ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {\n          if (allowed[cType] !== true) {\n            throw new Mexp.Exception(cToken + ' is not allowed after ' + prevKey);\n          }\n\n          str.push(closingParObj);\n          allowed = type1;\n          asterick = type3Asterick;\n          ptc.pop();\n        }\n      } else break;\n    }\n\n    if (allowed[cType] !== true) {\n      throw new Mexp.Exception(cToken + ' is not allowed after ' + prevKey);\n    }\n\n    if (asterick[cType] === true) {\n      cType = 2;\n      cEv = Mexp.math.mul;\n      cShow = '&times;';\n      cPre = 3;\n      i = i - 1;\n    }\n\n    obj = {\n      value: cEv,\n      type: cType,\n      pre: cPre,\n      show: cShow\n    };\n\n    if (cType === 0) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(2);\n      } // bracToClose++\n\n    } else if (cType === 1) {\n      if (pre.type === 1) {\n        pre.value += cEv;\n        inc(ptc, 1);\n      } else {\n        str.push(obj);\n      }\n\n      allowed = type1;\n      asterick = type1Asterick;\n    } else if (cType === 2) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n    } else if (cType === 3) {\n      // constant\n      str.push(obj);\n      allowed = type1;\n      asterick = type3Asterick;\n    } else if (cType === 4) {\n      inc(ptc, 1);\n      bracToClose++;\n      allowed = type0;\n      asterick = empty;\n      str.push(obj);\n    } else if (cType === 5) {\n      if (!bracToClose) {\n        throw new Mexp.Exception('Closing parenthesis are more than opening one, wait What!!!');\n      }\n\n      bracToClose--;\n      allowed = type1;\n      asterick = type3Asterick;\n      str.push(obj);\n      inc(ptc, 1);\n    } else if (cType === 6) {\n      if (pre.hasDec) {\n        throw new Mexp.Exception('Two decimals are not allowed in one number');\n      }\n\n      if (pre.type !== 1) {\n        pre = {\n          value: 0,\n          type: 1,\n          pre: 0\n        }; // pre needs to be changed as it will the last value now to be safe in later code\n\n        str.push(pre); // inc(ptc, 1)\n      }\n\n      allowed = type6;\n      inc(ptc, 1);\n      asterick = empty;\n      pre.value += cEv;\n      pre.hasDec = true;\n    } else if (cType === 7) {\n      allowed = type1;\n      asterick = type3Asterick;\n      inc(ptc, 1);\n      str.push(obj);\n    }\n\n    if (cType === 8) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 4);\n      str.push(obj); // str.push(openingParObj)\n\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(4);\n      }\n    } else if (cType === 9) {\n      if (pre.type === 9) {\n        if (pre.value === Mexp.math.add) {\n          pre.value = cEv;\n          pre.show = cShow;\n          inc(ptc, 1);\n        } else if (pre.value === Mexp.math.sub && cShow === '-') {\n          pre.value = Mexp.math.add;\n          pre.show = '+';\n          inc(ptc, 1);\n        }\n      } else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) {\n        // changesign only when negative is found\n        if (cToken === '-') {\n          // do nothing for + token\n          // don't add with the above if statement as that will run the else statement of parent if on Ctoken +\n          allowed = type0;\n          asterick = empty;\n          inc(ptc, 2).push(2);\n          str.push(changeSignObj);\n          str.push(openingParObj);\n        }\n      } else {\n        str.push(obj);\n        inc(ptc, 2);\n      }\n\n      allowed = type0;\n      asterick = empty;\n    } else if (cType === 10) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n    } else if (cType === 11) {\n      allowed = type0;\n      asterick = empty;\n      str.push(obj);\n    } else if (cType === 12) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 6);\n      str.push(obj);\n\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(6);\n      }\n    } else if (cType === 13) {\n      allowed = type1;\n      asterick = type3Asterick;\n      str.push(obj);\n    }\n\n    inc(ptc, -1);\n    prevKey = cToken;\n  }\n\n  for (j = ptc.length; j--;) {\n    // loop over ptc\n    str.push(closingParObj);\n  }\n\n  if (allowed[5] !== true) {\n    throw new Mexp.Exception('complete the expression');\n  }\n\n  while (bracToClose--) {\n    str.push(closingParObj);\n  }\n\n  str.push(closingParObj); //        console.log(str);\n\n  return new Mexp(str);\n};\n\nmodule.exports = Mexp;","map":{"version":3,"names":["Mexp","require","inc","arr","val","i","length","token","show","eva","math","sin","cos","tan","P","C","anchor","asin","acos","atan","Math","floor","cosh","acosh","log","pow","sqrt","div","fact","tanh","atanh","mod","mul","sinh","asinh","add","sub","sigma","Pi","and","preced","type","type0","type1","type1Asterick","empty","type3Asterick","type6","newAr","match","str1","str2","x","f","addToken","tokens","temp","y","indexOf","push","value","tokenize","string","nodes","key","undefined","Exception","slice","index","eval","precedence","lex","inp","changeSignObj","changeSign","pre","closingParObj","openingParObj","str","ptc","inpStr","allowed","bracToClose","asterick","prevKey","obj","node","cToken","cType","cEv","cPre","cShow","j","pop","hasDec","module","exports"],"sources":["E:/Work/PFE/Project folder/DocHelp/node_modules/math-expression-evaluator/src/lexer.js"],"sourcesContent":["'use strict'\r\nvar Mexp = require('./math_function.js')\r\nfunction inc (arr, val) {\r\n  for (var i = 0; i < arr.length; i++) {\r\n    arr[i] += val\r\n  }\r\n  return arr\r\n}\r\nvar token = [\r\n  'sin',\r\n  'cos',\r\n  'tan',\r\n  'pi',\r\n  '(',\r\n  ')',\r\n  'P',\r\n  'C',\r\n  ' ',\r\n  'asin',\r\n  'acos',\r\n  'atan',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  'int',\r\n  'cosh',\r\n  'acosh',\r\n  'ln',\r\n  '^',\r\n  'root',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '/',\r\n  '!',\r\n  'tanh',\r\n  'atanh',\r\n  'Mod',\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '*',\r\n  'sinh',\r\n  'asinh',\r\n  'e',\r\n  'log',\r\n  '0',\r\n  '.',\r\n  '+',\r\n  '-',\r\n  ',',\r\n  'Sigma',\r\n  'n',\r\n  'Pi',\r\n  'pow',\r\n  '&'\r\n]\r\nvar show = [\r\n  'sin',\r\n  'cos',\r\n  'tan',\r\n  '&pi;',\r\n  '(',\r\n  ')',\r\n  'P',\r\n  'C',\r\n  ' ',\r\n  'asin',\r\n  'acos',\r\n  'atan',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  'Int',\r\n  'cosh',\r\n  'acosh',\r\n  ' ln',\r\n  '^',\r\n  'root',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '&divide;',\r\n  '!',\r\n  'tanh',\r\n  'atanh',\r\n  ' Mod ',\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '&times;',\r\n  'sinh',\r\n  'asinh',\r\n  'e',\r\n  ' log',\r\n  '0',\r\n  '.',\r\n  '+',\r\n  '-',\r\n  ',',\r\n  '&Sigma;',\r\n  'n',\r\n  '&Pi;',\r\n  'pow',\r\n  '&'\r\n]\r\nvar eva = [\r\n  Mexp.math.sin,\r\n  Mexp.math.cos,\r\n  Mexp.math.tan,\r\n  'PI',\r\n  '(',\r\n  ')',\r\n  Mexp.math.P,\r\n  Mexp.math.C,\r\n  ' '.anchor,\r\n  Mexp.math.asin,\r\n  Mexp.math.acos,\r\n  Mexp.math.atan,\r\n  '7',\r\n  '8',\r\n  '9',\r\n  Math.floor,\r\n  Mexp.math.cosh,\r\n  Mexp.math.acosh,\r\n  Math.log,\r\n  Math.pow,\r\n  Math.sqrt,\r\n  '4',\r\n  '5',\r\n  '6',\r\n  Mexp.math.div,\r\n  Mexp.math.fact,\r\n  Mexp.math.tanh,\r\n  Mexp.math.atanh,\r\n  Mexp.math.mod,\r\n  '1',\r\n  '2',\r\n  '3',\r\n  Mexp.math.mul,\r\n  Mexp.math.sinh,\r\n  Mexp.math.asinh,\r\n  'E',\r\n  Mexp.math.log,\r\n  '0',\r\n  '.',\r\n  Mexp.math.add,\r\n  Mexp.math.sub,\r\n  ',',\r\n  Mexp.math.sigma,\r\n  'n',\r\n  Mexp.math.Pi,\r\n  Math.pow,\r\n  Mexp.math.and\r\n]\r\nvar preced = {\r\n  0: 11,\r\n  1: 0,\r\n  2: 3,\r\n  3: 0,\r\n  4: 0,\r\n  5: 0,\r\n  6: 0,\r\n  7: 11,\r\n  8: 11,\r\n  9: 1,\r\n  10: 10,\r\n  11: 0,\r\n  12: 11,\r\n  13: 0,\r\n  14: -1 // will be filtered after lexer\r\n} // stores precedence by types\r\nvar type = [\r\n  0, 0, 0, 3, 4, 5, 10, 10, 14, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 10, 0, 1, 1, 1, 2, 7, 0, 0, 2, 1, 1,\r\n  1, 2, 0, 0, 3, 0, 1, 6, 9, 9, 11, 12, 13, 12, 8, 9\r\n]\r\n/*\r\n0 : function with syntax function_name(Maths_exp)\r\n1 : numbers\r\n2 : binary operators like * / Mod left associate and same precedence\r\n3 : Math constant values like e,pi,Cruncher ans\r\n4 : opening bracket\r\n5 : closing bracket\r\n6 : decimal\r\n7 : function with syntax (Math_exp)function_name\r\n8: function with syntax function_name(Math_exp1,Math_exp2)\r\n9 : binary operator like +,-\r\n10: binary operator like P C or ^\r\n11: ,\r\n12: function with , seperated three parameters and third parameter is a string that will be mexp string\r\n13: variable of Sigma function\r\n*/\r\nvar type0 = {\r\n  0: true,\r\n  1: true,\r\n  3: true,\r\n  4: true,\r\n  6: true,\r\n  8: true,\r\n  9: true,\r\n  12: true,\r\n  13: true,\r\n  14: true\r\n} // type2:true,type4:true,type9:true,type11:true,type21:true,type22\r\nvar type1 = {\r\n  0: true,\r\n  1: true,\r\n  2: true,\r\n  3: true,\r\n  4: true,\r\n  5: true,\r\n  6: true,\r\n  7: true,\r\n  8: true,\r\n  9: true,\r\n  10: true,\r\n  11: true,\r\n  12: true,\r\n  13: true\r\n} // type3:true,type5:true,type7:true,type23\r\nvar type1Asterick = {\r\n  0: true,\r\n  3: true,\r\n  4: true,\r\n  8: true,\r\n  12: true,\r\n  13: true\r\n}\r\nvar empty = {}\r\nvar type3Asterick = {\r\n  0: true,\r\n  1: true,\r\n  3: true,\r\n  4: true,\r\n  6: true,\r\n  8: true,\r\n  12: true,\r\n  13: true\r\n} // type_5:true,type_7:true,type_23\r\nvar type6 = {\r\n  1: true\r\n}\r\nvar newAr = [\r\n  [],\r\n  [\r\n    '1',\r\n    '2',\r\n    '3',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '+',\r\n    '-',\r\n    '*',\r\n    '/',\r\n    '(',\r\n    ')',\r\n    '^',\r\n    '!',\r\n    'P',\r\n    'C',\r\n    'e',\r\n    '0',\r\n    '.',\r\n    ',',\r\n    'n',\r\n    ' ',\r\n    '&'\r\n  ],\r\n  ['pi', 'ln', 'Pi'],\r\n  ['sin', 'cos', 'tan', 'Del', 'int', 'Mod', 'log', 'pow'],\r\n  ['asin', 'acos', 'atan', 'cosh', 'root', 'tanh', 'sinh'],\r\n  ['acosh', 'atanh', 'asinh', 'Sigma']\r\n]\r\n\r\nfunction match (str1, str2, i, x) {\r\n  for (var f = 0; f < x; f++) {\r\n    if (str1[i + f] !== str2[f]) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\nMexp.addToken = function (tokens) {\r\n  for (var i = 0; i < tokens.length; i++) {\r\n    var x = tokens[i].token.length\r\n    var temp = -1\r\n\r\n    // newAr is a specially designed data structure index of 1d array = length of tokens\r\n    newAr[x] = newAr[x] || []\r\n    for (var y = 0; y < newAr[x].length; y++) {\r\n      if (tokens[i].token === newAr[x][y]) {\r\n        temp = token.indexOf(newAr[x][y])\r\n        break\r\n      }\r\n    }\r\n    if (temp === -1) {\r\n      token.push(tokens[i].token)\r\n      type.push(tokens[i].type)\r\n      if (newAr.length <= tokens[i].token.length) {\r\n        newAr[tokens[i].token.length] = []\r\n      }\r\n      newAr[tokens[i].token.length].push(tokens[i].token)\r\n      eva.push(tokens[i].value)\r\n      show.push(tokens[i].show)\r\n    } else {\r\n      // overwrite\r\n      token[temp] = tokens[i].token\r\n      type[temp] = tokens[i].type\r\n      eva[temp] = tokens[i].value\r\n      show[temp] = tokens[i].show\r\n    }\r\n  }\r\n}\r\n\r\nfunction tokenize (string) {\r\n  var nodes = []\r\n  var length = string.length\r\n  var key, x, y\r\n  for (var i = 0; i < length; i++) {\r\n    if (i < length - 1 && string[i] === ' ' && string[i + 1] === ' ') {\r\n      continue\r\n    }\r\n    key = ''\r\n    for (\r\n      x = string.length - i > newAr.length - 2 ? newAr.length - 1 : string.length - i;\r\n      x > 0;\r\n      x--\r\n    ) {\r\n      if (newAr[x] === undefined) continue\r\n      for (y = 0; y < newAr[x].length; y++) {\r\n        if (match(string, newAr[x][y], i, x)) {\r\n          key = newAr[x][y]\r\n          y = newAr[x].length\r\n          x = 0\r\n        }\r\n      }\r\n    }\r\n    i += key.length - 1\r\n    if (key === '') {\r\n      throw new Mexp.Exception(\"Can't understand after \" + string.slice(i))\r\n    }\r\n    var index = token.indexOf(key)\r\n    nodes.push({\r\n      index: index,\r\n      token: key,\r\n      type: type[index],\r\n      eval: eva[index],\r\n      precedence: preced[type[index]],\r\n      show: show[index]\r\n    })\r\n  }\r\n  return nodes\r\n}\r\n\r\nMexp.lex = function (inp, tokens) {\r\n  'use strict'\r\n\r\n  var changeSignObj = {\r\n    value: Mexp.math.changeSign,\r\n    type: 0,\r\n    pre: 21,\r\n    show: '-'\r\n  }\r\n  var closingParObj = {\r\n    value: ')',\r\n    show: ')',\r\n    type: 5,\r\n    pre: 0\r\n  }\r\n  var openingParObj = {\r\n    value: '(',\r\n    type: 4,\r\n    pre: 0,\r\n    show: '('\r\n  }\r\n  var str = [openingParObj]\r\n\r\n  var ptc = [] // Parenthesis to close at the beginning is after one token\r\n  var inpStr = inp\r\n  var allowed = type0\r\n  var bracToClose = 0\r\n  var asterick = empty\r\n  var prevKey = ''\r\n  var i\r\n  if (typeof tokens !== 'undefined') {\r\n    Mexp.addToken(tokens)\r\n  }\r\n  var obj = {}\r\n  var nodes = tokenize(inpStr)\r\n  for (i = 0; i < nodes.length; i++) {\r\n    var node = nodes[i]\r\n    if (node.type === 14) {\r\n      if (\r\n        i > 0 &&\r\n        i < nodes.length - 1 &&\r\n        nodes[i + 1].type === 1 &&\r\n        (nodes[i - 1].type === 1 || nodes[i - 1].type === 6)\r\n      ) { throw new Mexp.Exception('Unexpected Space') }\r\n      continue\r\n    }\r\n    var cToken = node.token\r\n    var cType = node.type\r\n    var cEv = node.eval\r\n    var cPre = node.precedence\r\n    var cShow = node.show\r\n    var pre = str[str.length - 1]\r\n    var j\r\n    for (j = ptc.length; j--;) {\r\n      // loop over ptc\r\n      if (ptc[j] === 0) {\r\n        if ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {\r\n          if (allowed[cType] !== true) {\r\n            throw new Mexp.Exception(cToken + ' is not allowed after ' + prevKey)\r\n          }\r\n          str.push(closingParObj)\r\n          allowed = type1\r\n          asterick = type3Asterick\r\n          ptc.pop()\r\n        }\r\n      } else break\r\n    }\r\n    if (allowed[cType] !== true) {\r\n      throw new Mexp.Exception(cToken + ' is not allowed after ' + prevKey)\r\n    }\r\n    if (asterick[cType] === true) {\r\n      cType = 2\r\n      cEv = Mexp.math.mul\r\n      cShow = '&times;'\r\n      cPre = 3\r\n      i = i - 1\r\n    }\r\n    obj = {\r\n      value: cEv,\r\n      type: cType,\r\n      pre: cPre,\r\n      show: cShow\r\n    }\r\n    if (cType === 0) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 2)\r\n      str.push(obj)\r\n      if (nodes[i + 1].type !== 4) {\r\n        str.push(openingParObj)\r\n        ptc.push(2)\r\n      }\r\n      // bracToClose++\r\n    } else if (cType === 1) {\r\n      if (pre.type === 1) {\r\n        pre.value += cEv\r\n        inc(ptc, 1)\r\n      } else {\r\n        str.push(obj)\r\n      }\r\n      allowed = type1\r\n      asterick = type1Asterick\r\n    } else if (cType === 2) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 2)\r\n      str.push(obj)\r\n    } else if (cType === 3) {\r\n      // constant\r\n      str.push(obj)\r\n      allowed = type1\r\n      asterick = type3Asterick\r\n    } else if (cType === 4) {\r\n      inc(ptc, 1)\r\n      bracToClose++\r\n      allowed = type0\r\n      asterick = empty\r\n      str.push(obj)\r\n    } else if (cType === 5) {\r\n      if (!bracToClose) {\r\n        throw new Mexp.Exception('Closing parenthesis are more than opening one, wait What!!!')\r\n      }\r\n      bracToClose--\r\n      allowed = type1\r\n      asterick = type3Asterick\r\n      str.push(obj)\r\n      inc(ptc, 1)\r\n    } else if (cType === 6) {\r\n      if (pre.hasDec) {\r\n        throw new Mexp.Exception('Two decimals are not allowed in one number')\r\n      }\r\n      if (pre.type !== 1) {\r\n        pre = {\r\n          value: 0,\r\n          type: 1,\r\n          pre: 0\r\n        } // pre needs to be changed as it will the last value now to be safe in later code\r\n        str.push(pre)\r\n        // inc(ptc, 1)\r\n      }\r\n      allowed = type6\r\n      inc(ptc, 1)\r\n      asterick = empty\r\n      pre.value += cEv\r\n      pre.hasDec = true\r\n    } else if (cType === 7) {\r\n      allowed = type1\r\n      asterick = type3Asterick\r\n      inc(ptc, 1)\r\n      str.push(obj)\r\n    }\r\n    if (cType === 8) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 4)\r\n      str.push(obj)\r\n      // str.push(openingParObj)\r\n      if (nodes[i + 1].type !== 4) {\r\n        str.push(openingParObj)\r\n        ptc.push(4)\r\n      }\r\n    } else if (cType === 9) {\r\n      if (pre.type === 9) {\r\n        if (pre.value === Mexp.math.add) {\r\n          pre.value = cEv\r\n          pre.show = cShow\r\n          inc(ptc, 1)\r\n        } else if (pre.value === Mexp.math.sub && cShow === '-') {\r\n          pre.value = Mexp.math.add\r\n          pre.show = '+'\r\n          inc(ptc, 1)\r\n        }\r\n      } else if (\r\n        pre.type !== 5 &&\r\n        pre.type !== 7 &&\r\n        pre.type !== 1 &&\r\n        pre.type !== 3 &&\r\n        pre.type !== 13\r\n      ) {\r\n        // changesign only when negative is found\r\n        if (cToken === '-') {\r\n          // do nothing for + token\r\n          // don't add with the above if statement as that will run the else statement of parent if on Ctoken +\r\n          allowed = type0\r\n          asterick = empty\r\n          inc(ptc, 2).push(2)\r\n          str.push(changeSignObj)\r\n          str.push(openingParObj)\r\n        }\r\n      } else {\r\n        str.push(obj)\r\n        inc(ptc, 2)\r\n      }\r\n      allowed = type0\r\n      asterick = empty\r\n    } else if (cType === 10) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 2)\r\n      str.push(obj)\r\n    } else if (cType === 11) {\r\n      allowed = type0\r\n      asterick = empty\r\n      str.push(obj)\r\n    } else if (cType === 12) {\r\n      allowed = type0\r\n      asterick = empty\r\n      inc(ptc, 6)\r\n      str.push(obj)\r\n      if (nodes[i + 1].type !== 4) {\r\n        str.push(openingParObj)\r\n        ptc.push(6)\r\n      }\r\n    } else if (cType === 13) {\r\n      allowed = type1\r\n      asterick = type3Asterick\r\n      str.push(obj)\r\n    }\r\n    inc(ptc, -1)\r\n    prevKey = cToken\r\n\r\n  }\r\n  for (j = ptc.length; j--;) {\r\n    // loop over ptc\r\n    str.push(closingParObj)\r\n  }\r\n  if (allowed[5] !== true) {\r\n    throw new Mexp.Exception('complete the expression')\r\n  }\r\n  while (bracToClose--) {\r\n    str.push(closingParObj)\r\n  }\r\n\r\n  str.push(closingParObj)\r\n  //        console.log(str);\r\n  return new Mexp(str)\r\n}\r\nmodule.exports = Mexp\r\n"],"mappings":"AAAA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,oBAAD,CAAlB;;AACA,SAASC,GAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwB;EACtB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;IACnCF,GAAG,CAACE,CAAD,CAAH,IAAUD,GAAV;EACD;;EACD,OAAOD,GAAP;AACD;;AACD,IAAII,KAAK,GAAG,CACV,KADU,EAEV,KAFU,EAGV,KAHU,EAIV,IAJU,EAKV,GALU,EAMV,GANU,EAOV,GAPU,EAQV,GARU,EASV,GATU,EAUV,MAVU,EAWV,MAXU,EAYV,MAZU,EAaV,GAbU,EAcV,GAdU,EAeV,GAfU,EAgBV,KAhBU,EAiBV,MAjBU,EAkBV,OAlBU,EAmBV,IAnBU,EAoBV,GApBU,EAqBV,MArBU,EAsBV,GAtBU,EAuBV,GAvBU,EAwBV,GAxBU,EAyBV,GAzBU,EA0BV,GA1BU,EA2BV,MA3BU,EA4BV,OA5BU,EA6BV,KA7BU,EA8BV,GA9BU,EA+BV,GA/BU,EAgCV,GAhCU,EAiCV,GAjCU,EAkCV,MAlCU,EAmCV,OAnCU,EAoCV,GApCU,EAqCV,KArCU,EAsCV,GAtCU,EAuCV,GAvCU,EAwCV,GAxCU,EAyCV,GAzCU,EA0CV,GA1CU,EA2CV,OA3CU,EA4CV,GA5CU,EA6CV,IA7CU,EA8CV,KA9CU,EA+CV,GA/CU,CAAZ;AAiDA,IAAIC,IAAI,GAAG,CACT,KADS,EAET,KAFS,EAGT,KAHS,EAIT,MAJS,EAKT,GALS,EAMT,GANS,EAOT,GAPS,EAQT,GARS,EAST,GATS,EAUT,MAVS,EAWT,MAXS,EAYT,MAZS,EAaT,GAbS,EAcT,GAdS,EAeT,GAfS,EAgBT,KAhBS,EAiBT,MAjBS,EAkBT,OAlBS,EAmBT,KAnBS,EAoBT,GApBS,EAqBT,MArBS,EAsBT,GAtBS,EAuBT,GAvBS,EAwBT,GAxBS,EAyBT,UAzBS,EA0BT,GA1BS,EA2BT,MA3BS,EA4BT,OA5BS,EA6BT,OA7BS,EA8BT,GA9BS,EA+BT,GA/BS,EAgCT,GAhCS,EAiCT,SAjCS,EAkCT,MAlCS,EAmCT,OAnCS,EAoCT,GApCS,EAqCT,MArCS,EAsCT,GAtCS,EAuCT,GAvCS,EAwCT,GAxCS,EAyCT,GAzCS,EA0CT,GA1CS,EA2CT,SA3CS,EA4CT,GA5CS,EA6CT,MA7CS,EA8CT,KA9CS,EA+CT,GA/CS,CAAX;AAiDA,IAAIC,GAAG,GAAG,CACRT,IAAI,CAACU,IAAL,CAAUC,GADF,EAERX,IAAI,CAACU,IAAL,CAAUE,GAFF,EAGRZ,IAAI,CAACU,IAAL,CAAUG,GAHF,EAIR,IAJQ,EAKR,GALQ,EAMR,GANQ,EAORb,IAAI,CAACU,IAAL,CAAUI,CAPF,EAQRd,IAAI,CAACU,IAAL,CAAUK,CARF,EASR,IAAIC,MATI,EAURhB,IAAI,CAACU,IAAL,CAAUO,IAVF,EAWRjB,IAAI,CAACU,IAAL,CAAUQ,IAXF,EAYRlB,IAAI,CAACU,IAAL,CAAUS,IAZF,EAaR,GAbQ,EAcR,GAdQ,EAeR,GAfQ,EAgBRC,IAAI,CAACC,KAhBG,EAiBRrB,IAAI,CAACU,IAAL,CAAUY,IAjBF,EAkBRtB,IAAI,CAACU,IAAL,CAAUa,KAlBF,EAmBRH,IAAI,CAACI,GAnBG,EAoBRJ,IAAI,CAACK,GApBG,EAqBRL,IAAI,CAACM,IArBG,EAsBR,GAtBQ,EAuBR,GAvBQ,EAwBR,GAxBQ,EAyBR1B,IAAI,CAACU,IAAL,CAAUiB,GAzBF,EA0BR3B,IAAI,CAACU,IAAL,CAAUkB,IA1BF,EA2BR5B,IAAI,CAACU,IAAL,CAAUmB,IA3BF,EA4BR7B,IAAI,CAACU,IAAL,CAAUoB,KA5BF,EA6BR9B,IAAI,CAACU,IAAL,CAAUqB,GA7BF,EA8BR,GA9BQ,EA+BR,GA/BQ,EAgCR,GAhCQ,EAiCR/B,IAAI,CAACU,IAAL,CAAUsB,GAjCF,EAkCRhC,IAAI,CAACU,IAAL,CAAUuB,IAlCF,EAmCRjC,IAAI,CAACU,IAAL,CAAUwB,KAnCF,EAoCR,GApCQ,EAqCRlC,IAAI,CAACU,IAAL,CAAUc,GArCF,EAsCR,GAtCQ,EAuCR,GAvCQ,EAwCRxB,IAAI,CAACU,IAAL,CAAUyB,GAxCF,EAyCRnC,IAAI,CAACU,IAAL,CAAU0B,GAzCF,EA0CR,GA1CQ,EA2CRpC,IAAI,CAACU,IAAL,CAAU2B,KA3CF,EA4CR,GA5CQ,EA6CRrC,IAAI,CAACU,IAAL,CAAU4B,EA7CF,EA8CRlB,IAAI,CAACK,GA9CG,EA+CRzB,IAAI,CAACU,IAAL,CAAU6B,GA/CF,CAAV;AAiDA,IAAIC,MAAM,GAAG;EACX,GAAG,EADQ;EAEX,GAAG,CAFQ;EAGX,GAAG,CAHQ;EAIX,GAAG,CAJQ;EAKX,GAAG,CALQ;EAMX,GAAG,CANQ;EAOX,GAAG,CAPQ;EAQX,GAAG,EARQ;EASX,GAAG,EATQ;EAUX,GAAG,CAVQ;EAWX,IAAI,EAXO;EAYX,IAAI,CAZO;EAaX,IAAI,EAbO;EAcX,IAAI,CAdO;EAeX,IAAI,CAAC,CAfM,CAeJ;;AAfI,CAAb,C,CAgBE;;AACF,IAAIC,IAAI,GAAG,CACT,CADS,EACN,CADM,EACH,CADG,EACA,CADA,EACG,CADH,EACM,CADN,EACS,EADT,EACa,EADb,EACiB,EADjB,EACqB,CADrB,EACwB,CADxB,EAC2B,CAD3B,EAC8B,CAD9B,EACiC,CADjC,EACoC,CADpC,EACuC,CADvC,EAC0C,CAD1C,EAC6C,CAD7C,EACgD,CADhD,EACmD,EADnD,EACuD,CADvD,EAC0D,CAD1D,EAC6D,CAD7D,EACgE,CADhE,EACmE,CADnE,EACsE,CADtE,EACyE,CADzE,EAC4E,CAD5E,EAC+E,CAD/E,EACkF,CADlF,EACqF,CADrF,EAET,CAFS,EAEN,CAFM,EAEH,CAFG,EAEA,CAFA,EAEG,CAFH,EAEM,CAFN,EAES,CAFT,EAEY,CAFZ,EAEe,CAFf,EAEkB,CAFlB,EAEqB,EAFrB,EAEyB,EAFzB,EAE6B,EAF7B,EAEiC,EAFjC,EAEqC,CAFrC,EAEwC,CAFxC,CAAX;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAG;EACV,GAAG,IADO;EAEV,GAAG,IAFO;EAGV,GAAG,IAHO;EAIV,GAAG,IAJO;EAKV,GAAG,IALO;EAMV,GAAG,IANO;EAOV,GAAG,IAPO;EAQV,IAAI,IARM;EASV,IAAI,IATM;EAUV,IAAI;AAVM,CAAZ,C,CAWE;;AACF,IAAIC,KAAK,GAAG;EACV,GAAG,IADO;EAEV,GAAG,IAFO;EAGV,GAAG,IAHO;EAIV,GAAG,IAJO;EAKV,GAAG,IALO;EAMV,GAAG,IANO;EAOV,GAAG,IAPO;EAQV,GAAG,IARO;EASV,GAAG,IATO;EAUV,GAAG,IAVO;EAWV,IAAI,IAXM;EAYV,IAAI,IAZM;EAaV,IAAI,IAbM;EAcV,IAAI;AAdM,CAAZ,C,CAeE;;AACF,IAAIC,aAAa,GAAG;EAClB,GAAG,IADe;EAElB,GAAG,IAFe;EAGlB,GAAG,IAHe;EAIlB,GAAG,IAJe;EAKlB,IAAI,IALc;EAMlB,IAAI;AANc,CAApB;AAQA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,aAAa,GAAG;EAClB,GAAG,IADe;EAElB,GAAG,IAFe;EAGlB,GAAG,IAHe;EAIlB,GAAG,IAJe;EAKlB,GAAG,IALe;EAMlB,GAAG,IANe;EAOlB,IAAI,IAPc;EAQlB,IAAI;AARc,CAApB,C,CASE;;AACF,IAAIC,KAAK,GAAG;EACV,GAAG;AADO,CAAZ;AAGA,IAAIC,KAAK,GAAG,CACV,EADU,EAEV,CACE,GADF,EAEE,GAFF,EAGE,GAHF,EAIE,GAJF,EAKE,GALF,EAME,GANF,EAOE,GAPF,EAQE,GARF,EASE,GATF,EAUE,GAVF,EAWE,GAXF,EAYE,GAZF,EAaE,GAbF,EAcE,GAdF,EAeE,GAfF,EAgBE,GAhBF,EAiBE,GAjBF,EAkBE,GAlBF,EAmBE,GAnBF,EAoBE,GApBF,EAqBE,GArBF,EAsBE,GAtBF,EAuBE,GAvBF,EAwBE,GAxBF,EAyBE,GAzBF,EA0BE,GA1BF,CAFU,EA8BV,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CA9BU,EA+BV,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,CA/BU,EAgCV,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,MAAjD,CAhCU,EAiCV,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,CAjCU,CAAZ;;AAoCA,SAASC,KAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B9C,CAA5B,EAA+B+C,CAA/B,EAAkC;EAChC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAApB,EAAuBC,CAAC,EAAxB,EAA4B;IAC1B,IAAIH,IAAI,CAAC7C,CAAC,GAAGgD,CAAL,CAAJ,KAAgBF,IAAI,CAACE,CAAD,CAAxB,EAA6B;MAC3B,OAAO,KAAP;IACD;EACF;;EACD,OAAO,IAAP;AACD;;AACDrD,IAAI,CAACsD,QAAL,GAAgB,UAAUC,MAAV,EAAkB;EAChC,KAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,MAAM,CAACjD,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;IACtC,IAAI+C,CAAC,GAAGG,MAAM,CAAClD,CAAD,CAAN,CAAUE,KAAV,CAAgBD,MAAxB;IACA,IAAIkD,IAAI,GAAG,CAAC,CAAZ,CAFsC,CAItC;;IACAR,KAAK,CAACI,CAAD,CAAL,GAAWJ,KAAK,CAACI,CAAD,CAAL,IAAY,EAAvB;;IACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACI,CAAD,CAAL,CAAS9C,MAA7B,EAAqCmD,CAAC,EAAtC,EAA0C;MACxC,IAAIF,MAAM,CAAClD,CAAD,CAAN,CAAUE,KAAV,KAAoByC,KAAK,CAACI,CAAD,CAAL,CAASK,CAAT,CAAxB,EAAqC;QACnCD,IAAI,GAAGjD,KAAK,CAACmD,OAAN,CAAcV,KAAK,CAACI,CAAD,CAAL,CAASK,CAAT,CAAd,CAAP;QACA;MACD;IACF;;IACD,IAAID,IAAI,KAAK,CAAC,CAAd,EAAiB;MACfjD,KAAK,CAACoD,IAAN,CAAWJ,MAAM,CAAClD,CAAD,CAAN,CAAUE,KAArB;MACAkC,IAAI,CAACkB,IAAL,CAAUJ,MAAM,CAAClD,CAAD,CAAN,CAAUoC,IAApB;;MACA,IAAIO,KAAK,CAAC1C,MAAN,IAAgBiD,MAAM,CAAClD,CAAD,CAAN,CAAUE,KAAV,CAAgBD,MAApC,EAA4C;QAC1C0C,KAAK,CAACO,MAAM,CAAClD,CAAD,CAAN,CAAUE,KAAV,CAAgBD,MAAjB,CAAL,GAAgC,EAAhC;MACD;;MACD0C,KAAK,CAACO,MAAM,CAAClD,CAAD,CAAN,CAAUE,KAAV,CAAgBD,MAAjB,CAAL,CAA8BqD,IAA9B,CAAmCJ,MAAM,CAAClD,CAAD,CAAN,CAAUE,KAA7C;MACAE,GAAG,CAACkD,IAAJ,CAASJ,MAAM,CAAClD,CAAD,CAAN,CAAUuD,KAAnB;MACApD,IAAI,CAACmD,IAAL,CAAUJ,MAAM,CAAClD,CAAD,CAAN,CAAUG,IAApB;IACD,CATD,MASO;MACL;MACAD,KAAK,CAACiD,IAAD,CAAL,GAAcD,MAAM,CAAClD,CAAD,CAAN,CAAUE,KAAxB;MACAkC,IAAI,CAACe,IAAD,CAAJ,GAAaD,MAAM,CAAClD,CAAD,CAAN,CAAUoC,IAAvB;MACAhC,GAAG,CAAC+C,IAAD,CAAH,GAAYD,MAAM,CAAClD,CAAD,CAAN,CAAUuD,KAAtB;MACApD,IAAI,CAACgD,IAAD,CAAJ,GAAaD,MAAM,CAAClD,CAAD,CAAN,CAAUG,IAAvB;IACD;EACF;AACF,CA9BD;;AAgCA,SAASqD,QAAT,CAAmBC,MAAnB,EAA2B;EACzB,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIzD,MAAM,GAAGwD,MAAM,CAACxD,MAApB;EACA,IAAI0D,GAAJ,EAASZ,CAAT,EAAYK,CAAZ;;EACA,KAAK,IAAIpD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;IAC/B,IAAIA,CAAC,GAAGC,MAAM,GAAG,CAAb,IAAkBwD,MAAM,CAACzD,CAAD,CAAN,KAAc,GAAhC,IAAuCyD,MAAM,CAACzD,CAAC,GAAG,CAAL,CAAN,KAAkB,GAA7D,EAAkE;MAChE;IACD;;IACD2D,GAAG,GAAG,EAAN;;IACA,KACEZ,CAAC,GAAGU,MAAM,CAACxD,MAAP,GAAgBD,CAAhB,GAAoB2C,KAAK,CAAC1C,MAAN,GAAe,CAAnC,GAAuC0C,KAAK,CAAC1C,MAAN,GAAe,CAAtD,GAA0DwD,MAAM,CAACxD,MAAP,GAAgBD,CADhF,EAEE+C,CAAC,GAAG,CAFN,EAGEA,CAAC,EAHH,EAIE;MACA,IAAIJ,KAAK,CAACI,CAAD,CAAL,KAAaa,SAAjB,EAA4B;;MAC5B,KAAKR,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,KAAK,CAACI,CAAD,CAAL,CAAS9C,MAAzB,EAAiCmD,CAAC,EAAlC,EAAsC;QACpC,IAAIR,KAAK,CAACa,MAAD,EAASd,KAAK,CAACI,CAAD,CAAL,CAASK,CAAT,CAAT,EAAsBpD,CAAtB,EAAyB+C,CAAzB,CAAT,EAAsC;UACpCY,GAAG,GAAGhB,KAAK,CAACI,CAAD,CAAL,CAASK,CAAT,CAAN;UACAA,CAAC,GAAGT,KAAK,CAACI,CAAD,CAAL,CAAS9C,MAAb;UACA8C,CAAC,GAAG,CAAJ;QACD;MACF;IACF;;IACD/C,CAAC,IAAI2D,GAAG,CAAC1D,MAAJ,GAAa,CAAlB;;IACA,IAAI0D,GAAG,KAAK,EAAZ,EAAgB;MACd,MAAM,IAAIhE,IAAI,CAACkE,SAAT,CAAmB,4BAA4BJ,MAAM,CAACK,KAAP,CAAa9D,CAAb,CAA/C,CAAN;IACD;;IACD,IAAI+D,KAAK,GAAG7D,KAAK,CAACmD,OAAN,CAAcM,GAAd,CAAZ;IACAD,KAAK,CAACJ,IAAN,CAAW;MACTS,KAAK,EAAEA,KADE;MAET7D,KAAK,EAAEyD,GAFE;MAGTvB,IAAI,EAAEA,IAAI,CAAC2B,KAAD,CAHD;MAITC,IAAI,EAAE5D,GAAG,CAAC2D,KAAD,CAJA;MAKTE,UAAU,EAAE9B,MAAM,CAACC,IAAI,CAAC2B,KAAD,CAAL,CALT;MAMT5D,IAAI,EAAEA,IAAI,CAAC4D,KAAD;IAND,CAAX;EAQD;;EACD,OAAOL,KAAP;AACD;;AAED/D,IAAI,CAACuE,GAAL,GAAW,UAAUC,GAAV,EAAejB,MAAf,EAAuB;EAChC;;EAEA,IAAIkB,aAAa,GAAG;IAClBb,KAAK,EAAE5D,IAAI,CAACU,IAAL,CAAUgE,UADC;IAElBjC,IAAI,EAAE,CAFY;IAGlBkC,GAAG,EAAE,EAHa;IAIlBnE,IAAI,EAAE;EAJY,CAApB;EAMA,IAAIoE,aAAa,GAAG;IAClBhB,KAAK,EAAE,GADW;IAElBpD,IAAI,EAAE,GAFY;IAGlBiC,IAAI,EAAE,CAHY;IAIlBkC,GAAG,EAAE;EAJa,CAApB;EAMA,IAAIE,aAAa,GAAG;IAClBjB,KAAK,EAAE,GADW;IAElBnB,IAAI,EAAE,CAFY;IAGlBkC,GAAG,EAAE,CAHa;IAIlBnE,IAAI,EAAE;EAJY,CAApB;EAMA,IAAIsE,GAAG,GAAG,CAACD,aAAD,CAAV;EAEA,IAAIE,GAAG,GAAG,EAAV,CAvBgC,CAuBnB;;EACb,IAAIC,MAAM,GAAGR,GAAb;EACA,IAAIS,OAAO,GAAGvC,KAAd;EACA,IAAIwC,WAAW,GAAG,CAAlB;EACA,IAAIC,QAAQ,GAAGtC,KAAf;EACA,IAAIuC,OAAO,GAAG,EAAd;EACA,IAAI/E,CAAJ;;EACA,IAAI,OAAOkD,MAAP,KAAkB,WAAtB,EAAmC;IACjCvD,IAAI,CAACsD,QAAL,CAAcC,MAAd;EACD;;EACD,IAAI8B,GAAG,GAAG,EAAV;EACA,IAAItB,KAAK,GAAGF,QAAQ,CAACmB,MAAD,CAApB;;EACA,KAAK3E,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG0D,KAAK,CAACzD,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;IACjC,IAAIiF,IAAI,GAAGvB,KAAK,CAAC1D,CAAD,CAAhB;;IACA,IAAIiF,IAAI,CAAC7C,IAAL,KAAc,EAAlB,EAAsB;MACpB,IACEpC,CAAC,GAAG,CAAJ,IACAA,CAAC,GAAG0D,KAAK,CAACzD,MAAN,GAAe,CADnB,IAEAyD,KAAK,CAAC1D,CAAC,GAAG,CAAL,CAAL,CAAaoC,IAAb,KAAsB,CAFtB,KAGCsB,KAAK,CAAC1D,CAAC,GAAG,CAAL,CAAL,CAAaoC,IAAb,KAAsB,CAAtB,IAA2BsB,KAAK,CAAC1D,CAAC,GAAG,CAAL,CAAL,CAAaoC,IAAb,KAAsB,CAHlD,CADF,EAKE;QAAE,MAAM,IAAIzC,IAAI,CAACkE,SAAT,CAAmB,kBAAnB,CAAN;MAA8C;;MAClD;IACD;;IACD,IAAIqB,MAAM,GAAGD,IAAI,CAAC/E,KAAlB;IACA,IAAIiF,KAAK,GAAGF,IAAI,CAAC7C,IAAjB;IACA,IAAIgD,GAAG,GAAGH,IAAI,CAACjB,IAAf;IACA,IAAIqB,IAAI,GAAGJ,IAAI,CAAChB,UAAhB;IACA,IAAIqB,KAAK,GAAGL,IAAI,CAAC9E,IAAjB;IACA,IAAImE,GAAG,GAAGG,GAAG,CAACA,GAAG,CAACxE,MAAJ,GAAa,CAAd,CAAb;IACA,IAAIsF,CAAJ;;IACA,KAAKA,CAAC,GAAGb,GAAG,CAACzE,MAAb,EAAqBsF,CAAC,EAAtB,GAA2B;MACzB;MACA,IAAIb,GAAG,CAACa,CAAD,CAAH,KAAW,CAAf,EAAkB;QAChB,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+BlC,OAA/B,CAAuC8B,KAAvC,MAAkD,CAAC,CAAvD,EAA0D;UACxD,IAAIP,OAAO,CAACO,KAAD,CAAP,KAAmB,IAAvB,EAA6B;YAC3B,MAAM,IAAIxF,IAAI,CAACkE,SAAT,CAAmBqB,MAAM,GAAG,wBAAT,GAAoCH,OAAvD,CAAN;UACD;;UACDN,GAAG,CAACnB,IAAJ,CAASiB,aAAT;UACAK,OAAO,GAAGtC,KAAV;UACAwC,QAAQ,GAAGrC,aAAX;UACAiC,GAAG,CAACc,GAAJ;QACD;MACF,CAVD,MAUO;IACR;;IACD,IAAIZ,OAAO,CAACO,KAAD,CAAP,KAAmB,IAAvB,EAA6B;MAC3B,MAAM,IAAIxF,IAAI,CAACkE,SAAT,CAAmBqB,MAAM,GAAG,wBAAT,GAAoCH,OAAvD,CAAN;IACD;;IACD,IAAID,QAAQ,CAACK,KAAD,CAAR,KAAoB,IAAxB,EAA8B;MAC5BA,KAAK,GAAG,CAAR;MACAC,GAAG,GAAGzF,IAAI,CAACU,IAAL,CAAUsB,GAAhB;MACA2D,KAAK,GAAG,SAAR;MACAD,IAAI,GAAG,CAAP;MACArF,CAAC,GAAGA,CAAC,GAAG,CAAR;IACD;;IACDgF,GAAG,GAAG;MACJzB,KAAK,EAAE6B,GADH;MAEJhD,IAAI,EAAE+C,KAFF;MAGJb,GAAG,EAAEe,IAHD;MAIJlF,IAAI,EAAEmF;IAJF,CAAN;;IAMA,IAAIH,KAAK,KAAK,CAAd,EAAiB;MACfP,OAAO,GAAGvC,KAAV;MACAyC,QAAQ,GAAGtC,KAAX;MACA3C,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACAD,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;;MACA,IAAItB,KAAK,CAAC1D,CAAC,GAAG,CAAL,CAAL,CAAaoC,IAAb,KAAsB,CAA1B,EAA6B;QAC3BqC,GAAG,CAACnB,IAAJ,CAASkB,aAAT;QACAE,GAAG,CAACpB,IAAJ,CAAS,CAAT;MACD,CARc,CASf;;IACD,CAVD,MAUO,IAAI6B,KAAK,KAAK,CAAd,EAAiB;MACtB,IAAIb,GAAG,CAAClC,IAAJ,KAAa,CAAjB,EAAoB;QAClBkC,GAAG,CAACf,KAAJ,IAAa6B,GAAb;QACAvF,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACD,CAHD,MAGO;QACLD,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;MACD;;MACDJ,OAAO,GAAGtC,KAAV;MACAwC,QAAQ,GAAGvC,aAAX;IACD,CATM,MASA,IAAI4C,KAAK,KAAK,CAAd,EAAiB;MACtBP,OAAO,GAAGvC,KAAV;MACAyC,QAAQ,GAAGtC,KAAX;MACA3C,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACAD,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;IACD,CALM,MAKA,IAAIG,KAAK,KAAK,CAAd,EAAiB;MACtB;MACAV,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;MACAJ,OAAO,GAAGtC,KAAV;MACAwC,QAAQ,GAAGrC,aAAX;IACD,CALM,MAKA,IAAI0C,KAAK,KAAK,CAAd,EAAiB;MACtBtF,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACAG,WAAW;MACXD,OAAO,GAAGvC,KAAV;MACAyC,QAAQ,GAAGtC,KAAX;MACAiC,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;IACD,CANM,MAMA,IAAIG,KAAK,KAAK,CAAd,EAAiB;MACtB,IAAI,CAACN,WAAL,EAAkB;QAChB,MAAM,IAAIlF,IAAI,CAACkE,SAAT,CAAmB,6DAAnB,CAAN;MACD;;MACDgB,WAAW;MACXD,OAAO,GAAGtC,KAAV;MACAwC,QAAQ,GAAGrC,aAAX;MACAgC,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;MACAnF,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;IACD,CATM,MASA,IAAIS,KAAK,KAAK,CAAd,EAAiB;MACtB,IAAIb,GAAG,CAACmB,MAAR,EAAgB;QACd,MAAM,IAAI9F,IAAI,CAACkE,SAAT,CAAmB,4CAAnB,CAAN;MACD;;MACD,IAAIS,GAAG,CAAClC,IAAJ,KAAa,CAAjB,EAAoB;QAClBkC,GAAG,GAAG;UACJf,KAAK,EAAE,CADH;UAEJnB,IAAI,EAAE,CAFF;UAGJkC,GAAG,EAAE;QAHD,CAAN,CADkB,CAKhB;;QACFG,GAAG,CAACnB,IAAJ,CAASgB,GAAT,EANkB,CAOlB;MACD;;MACDM,OAAO,GAAGlC,KAAV;MACA7C,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACAI,QAAQ,GAAGtC,KAAX;MACA8B,GAAG,CAACf,KAAJ,IAAa6B,GAAb;MACAd,GAAG,CAACmB,MAAJ,GAAa,IAAb;IACD,CAlBM,MAkBA,IAAIN,KAAK,KAAK,CAAd,EAAiB;MACtBP,OAAO,GAAGtC,KAAV;MACAwC,QAAQ,GAAGrC,aAAX;MACA5C,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACAD,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;IACD;;IACD,IAAIG,KAAK,KAAK,CAAd,EAAiB;MACfP,OAAO,GAAGvC,KAAV;MACAyC,QAAQ,GAAGtC,KAAX;MACA3C,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACAD,GAAG,CAACnB,IAAJ,CAAS0B,GAAT,EAJe,CAKf;;MACA,IAAItB,KAAK,CAAC1D,CAAC,GAAG,CAAL,CAAL,CAAaoC,IAAb,KAAsB,CAA1B,EAA6B;QAC3BqC,GAAG,CAACnB,IAAJ,CAASkB,aAAT;QACAE,GAAG,CAACpB,IAAJ,CAAS,CAAT;MACD;IACF,CAVD,MAUO,IAAI6B,KAAK,KAAK,CAAd,EAAiB;MACtB,IAAIb,GAAG,CAAClC,IAAJ,KAAa,CAAjB,EAAoB;QAClB,IAAIkC,GAAG,CAACf,KAAJ,KAAc5D,IAAI,CAACU,IAAL,CAAUyB,GAA5B,EAAiC;UAC/BwC,GAAG,CAACf,KAAJ,GAAY6B,GAAZ;UACAd,GAAG,CAACnE,IAAJ,GAAWmF,KAAX;UACAzF,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;QACD,CAJD,MAIO,IAAIJ,GAAG,CAACf,KAAJ,KAAc5D,IAAI,CAACU,IAAL,CAAU0B,GAAxB,IAA+BuD,KAAK,KAAK,GAA7C,EAAkD;UACvDhB,GAAG,CAACf,KAAJ,GAAY5D,IAAI,CAACU,IAAL,CAAUyB,GAAtB;UACAwC,GAAG,CAACnE,IAAJ,GAAW,GAAX;UACAN,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;QACD;MACF,CAVD,MAUO,IACLJ,GAAG,CAAClC,IAAJ,KAAa,CAAb,IACAkC,GAAG,CAAClC,IAAJ,KAAa,CADb,IAEAkC,GAAG,CAAClC,IAAJ,KAAa,CAFb,IAGAkC,GAAG,CAAClC,IAAJ,KAAa,CAHb,IAIAkC,GAAG,CAAClC,IAAJ,KAAa,EALR,EAML;QACA;QACA,IAAI8C,MAAM,KAAK,GAAf,EAAoB;UAClB;UACA;UACAN,OAAO,GAAGvC,KAAV;UACAyC,QAAQ,GAAGtC,KAAX;UACA3C,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH,CAAYpB,IAAZ,CAAiB,CAAjB;UACAmB,GAAG,CAACnB,IAAJ,CAASc,aAAT;UACAK,GAAG,CAACnB,IAAJ,CAASkB,aAAT;QACD;MACF,CAjBM,MAiBA;QACLC,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;QACAnF,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACD;;MACDE,OAAO,GAAGvC,KAAV;MACAyC,QAAQ,GAAGtC,KAAX;IACD,CAlCM,MAkCA,IAAI2C,KAAK,KAAK,EAAd,EAAkB;MACvBP,OAAO,GAAGvC,KAAV;MACAyC,QAAQ,GAAGtC,KAAX;MACA3C,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACAD,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;IACD,CALM,MAKA,IAAIG,KAAK,KAAK,EAAd,EAAkB;MACvBP,OAAO,GAAGvC,KAAV;MACAyC,QAAQ,GAAGtC,KAAX;MACAiC,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;IACD,CAJM,MAIA,IAAIG,KAAK,KAAK,EAAd,EAAkB;MACvBP,OAAO,GAAGvC,KAAV;MACAyC,QAAQ,GAAGtC,KAAX;MACA3C,GAAG,CAAC6E,GAAD,EAAM,CAAN,CAAH;MACAD,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;;MACA,IAAItB,KAAK,CAAC1D,CAAC,GAAG,CAAL,CAAL,CAAaoC,IAAb,KAAsB,CAA1B,EAA6B;QAC3BqC,GAAG,CAACnB,IAAJ,CAASkB,aAAT;QACAE,GAAG,CAACpB,IAAJ,CAAS,CAAT;MACD;IACF,CATM,MASA,IAAI6B,KAAK,KAAK,EAAd,EAAkB;MACvBP,OAAO,GAAGtC,KAAV;MACAwC,QAAQ,GAAGrC,aAAX;MACAgC,GAAG,CAACnB,IAAJ,CAAS0B,GAAT;IACD;;IACDnF,GAAG,CAAC6E,GAAD,EAAM,CAAC,CAAP,CAAH;IACAK,OAAO,GAAGG,MAAV;EAED;;EACD,KAAKK,CAAC,GAAGb,GAAG,CAACzE,MAAb,EAAqBsF,CAAC,EAAtB,GAA2B;IACzB;IACAd,GAAG,CAACnB,IAAJ,CAASiB,aAAT;EACD;;EACD,IAAIK,OAAO,CAAC,CAAD,CAAP,KAAe,IAAnB,EAAyB;IACvB,MAAM,IAAIjF,IAAI,CAACkE,SAAT,CAAmB,yBAAnB,CAAN;EACD;;EACD,OAAOgB,WAAW,EAAlB,EAAsB;IACpBJ,GAAG,CAACnB,IAAJ,CAASiB,aAAT;EACD;;EAEDE,GAAG,CAACnB,IAAJ,CAASiB,aAAT,EAzOgC,CA0OhC;;EACA,OAAO,IAAI5E,IAAJ,CAAS8E,GAAT,CAAP;AACD,CA5OD;;AA6OAiB,MAAM,CAACC,OAAP,GAAiBhG,IAAjB"},"metadata":{},"sourceType":"script"}