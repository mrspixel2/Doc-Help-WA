{"ast":null,"code":"'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEntity\n * @format\n * \n */\n\n\nvar DraftEntityInstance = require('./DraftEntityInstance');\n\nvar Immutable = require('immutable');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Map = Immutable.Map;\nvar instances = Map();\nvar instanceKey = 0;\n/**\n * Temporary utility for generating the warnings\n */\n\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\n\n\nvar DraftEntity = {\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return '' + instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({\n      type: type,\n      mutability: mutability,\n      data: data || {}\n    }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    var key = '' + ++instanceKey;\n    instances = instances.set(key, instance);\n    return key;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n\n    var newData = _extends({}, instance.getData(), toMerge);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\nmodule.exports = DraftEntity;","map":{"version":3,"names":["_assign","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","DraftEntityInstance","Immutable","invariant","Map","instances","instanceKey","logWarning","oldMethodCall","newMethodCall","console","warn","DraftEntity","getLastCreatedEntityKey","__getLastCreatedEntityKey","create","type","mutability","data","__create","add","instance","__add","get","__get","mergeData","toMerge","__mergeData","replaceData","newData","__replaceData","set","process","env","NODE_ENV","getData","newInstance","module","exports"],"sources":["E:/Work/PFE/Project folder/DocHelp/node_modules/draft-js/lib/DraftEntity.js"],"sourcesContent":["'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEntity\n * @format\n * \n */\n\nvar DraftEntityInstance = require('./DraftEntityInstance');\nvar Immutable = require('immutable');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Map = Immutable.Map;\n\n\nvar instances = Map();\nvar instanceKey = 0;\n\n/**\n * Temporary utility for generating the warnings\n */\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\nvar DraftEntity = {\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return '' + instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({ type: type, mutability: mutability, data: data || {} }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    var key = '' + ++instanceKey;\n    instances = instances.set(key, instance);\n    return key;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n    var newData = _extends({}, instance.getData(), toMerge);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\n\nmodule.exports = DraftEntity;"],"mappings":"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"},"metadata":{},"sourceType":"script"}