{"ast":null,"code":"async function request(url, config) {\n  return await fetch(url, config).then(response => response.json()).then(data => data).catch(error => {\n    console.log('something something' + error);\n  });\n}\n\nconst data = request('http://localhost:5000/query/predictions_per_month', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  color: '#336cfb',\n  tooltip: {\n    trigger: 'none',\n    axisPointer: {\n      type: 'cross'\n    }\n  },\n  legend: {\n    data: []\n  },\n  grid: {\n    left: 30,\n    right: 0,\n    top: 50,\n    bottom: 50\n  },\n  xAxis: [{\n    type: 'category',\n    axisTick: {\n      alignWithLabel: true\n    },\n    axisLine: {\n      onZero: false,\n      lineStyle: {\n        color: '#336cfb'\n      }\n    },\n    axisPointer: {\n      label: {\n        formatter: function (params) {\n          return 'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '');\n        }\n      }\n    },\n    data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  }],\n  yAxis: [{\n    type: 'value'\n  }],\n  series: [{\n    name: 'patients ' + data['_id'],\n    type: 'line',\n    smooth: true,\n    data: [95, 124, 132, 143, 138, 178, 194, 211, 234, 257, 241, 226]\n  }]\n};","map":{"version":3,"names":["request","url","config","fetch","then","response","json","data","catch","error","console","log","method","headers","color","tooltip","trigger","axisPointer","type","legend","grid","left","right","top","bottom","xAxis","axisTick","alignWithLabel","axisLine","onZero","lineStyle","label","formatter","params","value","seriesData","length","yAxis","series","name","smooth"],"sources":["E:/Work/PFE/Project folder/DocHelp/src/pages/dashboards/dashboard/charts/predictions-month-linechart.tsx"],"sourcesContent":["\r\nasync function request<TResponse>(\r\n    url: string,\r\n    config: RequestInit\r\n): Promise<TResponse> {\r\n    return await fetch(url, config)\r\n        .then(response => response.json())\r\n        .then(data => data)\r\n        .catch(error => {\r\n            console.log('something something'+ error)\r\n        })\r\n}\r\n\r\nconst data = request('http://localhost:5000/query/predictions_per_month', {\r\n    method: 'GET',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        })\r\n\r\n\r\n\r\nexport default {\r\n    color: '#336cfb',\r\n    tooltip: {\r\n        trigger: 'none',\r\n        axisPointer: {\r\n            type: 'cross'\r\n        }\r\n    },\r\n    legend: {\r\n        data: []\r\n    },\r\n    grid: {\r\n        left: 30,\r\n        right: 0,\r\n        top: 50,\r\n        bottom: 50\r\n    },\r\n    xAxis: [\r\n        {\r\n            type: 'category',\r\n            axisTick: {\r\n                alignWithLabel: true\r\n            },\r\n            axisLine: {\r\n                onZero: false,\r\n                lineStyle: {\r\n                    color: '#336cfb'\r\n                }\r\n            },\r\n            axisPointer: {\r\n                label: {\r\n                    formatter: function (params) {\r\n                        return (\r\n                            'patients ' + params.value + (params.seriesData.length ? '：' + params.seriesData[0].data : '')\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n            data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n        }\r\n    ],\r\n    yAxis: [\r\n        {\r\n            type: 'value'\r\n        }\r\n    ],\r\n    series: [\r\n        {\r\n            name: 'patients ' + data['_id'],\r\n            type: 'line',\r\n            smooth: true,\r\n            data: [95, 124, 132, 143, 138, 178, 194, 211, 234, 257, 241, 226]\r\n        }\r\n    ]\r\n};\r\n"],"mappings":"AACA,eAAeA,OAAf,CACIC,GADJ,EAEIC,MAFJ,EAGsB;EAClB,OAAO,MAAMC,KAAK,CAACF,GAAD,EAAMC,MAAN,CAAL,CACRE,IADQ,CACHC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADT,EAERF,IAFQ,CAEHG,IAAI,IAAIA,IAFL,EAGRC,KAHQ,CAGFC,KAAK,IAAI;IACZC,OAAO,CAACC,GAAR,CAAY,wBAAuBF,KAAnC;EACH,CALQ,CAAb;AAMH;;AAED,MAAMF,IAAI,GAAGP,OAAO,CAAC,mDAAD,EAAsD;EACtEY,MAAM,EAAE,KAD8D;EAEtEC,OAAO,EAAE;IACL,gBAAgB;EADX;AAF6D,CAAtD,CAApB;AASA,eAAe;EACXC,KAAK,EAAE,SADI;EAEXC,OAAO,EAAE;IACLC,OAAO,EAAE,MADJ;IAELC,WAAW,EAAE;MACTC,IAAI,EAAE;IADG;EAFR,CAFE;EAQXC,MAAM,EAAE;IACJZ,IAAI,EAAE;EADF,CARG;EAWXa,IAAI,EAAE;IACFC,IAAI,EAAE,EADJ;IAEFC,KAAK,EAAE,CAFL;IAGFC,GAAG,EAAE,EAHH;IAIFC,MAAM,EAAE;EAJN,CAXK;EAiBXC,KAAK,EAAE,CACH;IACIP,IAAI,EAAE,UADV;IAEIQ,QAAQ,EAAE;MACNC,cAAc,EAAE;IADV,CAFd;IAKIC,QAAQ,EAAE;MACNC,MAAM,EAAE,KADF;MAENC,SAAS,EAAE;QACPhB,KAAK,EAAE;MADA;IAFL,CALd;IAWIG,WAAW,EAAE;MACTc,KAAK,EAAE;QACHC,SAAS,EAAE,UAAUC,MAAV,EAAkB;UACzB,OACI,cAAcA,MAAM,CAACC,KAArB,IAA8BD,MAAM,CAACE,UAAP,CAAkBC,MAAlB,GAA2B,MAAMH,MAAM,CAACE,UAAP,CAAkB,CAAlB,EAAqB5B,IAAtD,GAA6D,EAA3F,CADJ;QAGH;MALE;IADE,CAXjB;IAoBIA,IAAI,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E;EApBV,CADG,CAjBI;EAyCX8B,KAAK,EAAE,CACH;IACInB,IAAI,EAAE;EADV,CADG,CAzCI;EA8CXoB,MAAM,EAAE,CACJ;IACIC,IAAI,EAAE,cAAchC,IAAI,CAAC,KAAD,CAD5B;IAEIW,IAAI,EAAE,MAFV;IAGIsB,MAAM,EAAE,IAHZ;IAIIjC,IAAI,EAAE,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,EAAkD,GAAlD,EAAuD,GAAvD;EAJV,CADI;AA9CG,CAAf"},"metadata":{},"sourceType":"module"}